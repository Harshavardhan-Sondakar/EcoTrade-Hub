{"ast":null,"code":"import $b3427c06585c22a0$exports from \"./ar-AE.mjs\";\nimport $d282528f459122b9$exports from \"./bg-BG.mjs\";\nimport $2d5eecd634a9ca45$exports from \"./cs-CZ.mjs\";\nimport $c8e2288226c24a67$exports from \"./da-DK.mjs\";\nimport $6f5745e389c346d7$exports from \"./de-DE.mjs\";\nimport $8c882ccf4300d1da$exports from \"./el-GR.mjs\";\nimport $22195056771860be$exports from \"./en-US.mjs\";\nimport $cedfa43b4e2a5906$exports from \"./es-ES.mjs\";\nimport $eeeaa8daee3601c7$exports from \"./et-EE.mjs\";\nimport $35e0614a49b3bb40$exports from \"./fi-FI.mjs\";\nimport $929bc63f7705a78f$exports from \"./fr-FR.mjs\";\nimport $9a28d073b034d183$exports from \"./he-IL.mjs\";\nimport $7743e79780ebcca3$exports from \"./hr-HR.mjs\";\nimport $3351817a04898858$exports from \"./hu-HU.mjs\";\nimport $4120bdb1d03484db$exports from \"./it-IT.mjs\";\nimport $65e5e1569f34ea4f$exports from \"./ja-JP.mjs\";\nimport $d34552a7550967e7$exports from \"./ko-KR.mjs\";\nimport $8f855bffe63f6eca$exports from \"./lt-LT.mjs\";\nimport $ce40f46d09034645$exports from \"./lv-LV.mjs\";\nimport $dd1a9a73340c793e$exports from \"./nb-NO.mjs\";\nimport $4ee1fb3f0cbe6f59$exports from \"./nl-NL.mjs\";\nimport $c85829aebb0bc94b$exports from \"./pl-PL.mjs\";\nimport $27f5cd2291ca8a02$exports from \"./pt-BR.mjs\";\nimport $e046fdccd69bea8e$exports from \"./pt-PT.mjs\";\nimport $fa5f88e804986547$exports from \"./ro-RO.mjs\";\nimport $28e4714602d1b568$exports from \"./ru-RU.mjs\";\nimport $4e3bc8cf783ad569$exports from \"./sk-SK.mjs\";\nimport $bee07513333bdc15$exports from \"./sl-SI.mjs\";\nimport $7ed9c6fad16a15ec$exports from \"./sr-SP.mjs\";\nimport $8bef6d5a236de86c$exports from \"./sv-SE.mjs\";\nimport $098b9a2d2340cfc5$exports from \"./tr-TR.mjs\";\nimport $54a862ea7fad7419$exports from \"./uk-UA.mjs\";\nimport $e6cc491d590dfda5$exports from \"./zh-CN.mjs\";\nimport $9aebf53181a474bd$exports from \"./zh-TW.mjs\";\nimport { toCalendarDate as $7UzoM$toCalendarDate, toCalendarDateTime as $7UzoM$toCalendarDateTime, DateFormatter as $7UzoM$DateFormatter, Time as $7UzoM$Time, toCalendar as $7UzoM$toCalendar, now as $7UzoM$now, GregorianCalendar as $7UzoM$GregorianCalendar, getMinimumMonthInYear as $7UzoM$getMinimumMonthInYear, getMinimumDayInMonth as $7UzoM$getMinimumDayInMonth, toZoned as $7UzoM$toZoned, toTime as $7UzoM$toTime, today as $7UzoM$today, getLocalTimeZone as $7UzoM$getLocalTimeZone } from \"@internationalized/date\";\nimport { useFormValidationState as $7UzoM$useFormValidationState, mergeValidation as $7UzoM$mergeValidation, VALID_VALIDITY_STATE as $7UzoM$VALID_VALIDITY_STATE } from \"@react-stately/form\";\nimport { useOverlayTriggerState as $7UzoM$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useControlledState as $7UzoM$useControlledState } from \"@react-stately/utils\";\nimport { useState as $7UzoM$useState, useMemo as $7UzoM$useMemo, useRef as $7UzoM$useRef, useEffect as $7UzoM$useEffect, useCallback as $7UzoM$useCallback } from \"react\";\nimport { LocalizedStringDictionary as $7UzoM$LocalizedStringDictionary, LocalizedStringFormatter as $7UzoM$LocalizedStringFormatter } from \"@internationalized/string\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $452ac34de8c2444e$exports = {};\n$452ac34de8c2444e$exports = {\n  \"ar-AE\": $b3427c06585c22a0$exports,\n  \"bg-BG\": $d282528f459122b9$exports,\n  \"cs-CZ\": $2d5eecd634a9ca45$exports,\n  \"da-DK\": $c8e2288226c24a67$exports,\n  \"de-DE\": $6f5745e389c346d7$exports,\n  \"el-GR\": $8c882ccf4300d1da$exports,\n  \"en-US\": $22195056771860be$exports,\n  \"es-ES\": $cedfa43b4e2a5906$exports,\n  \"et-EE\": $eeeaa8daee3601c7$exports,\n  \"fi-FI\": $35e0614a49b3bb40$exports,\n  \"fr-FR\": $929bc63f7705a78f$exports,\n  \"he-IL\": $9a28d073b034d183$exports,\n  \"hr-HR\": $7743e79780ebcca3$exports,\n  \"hu-HU\": $3351817a04898858$exports,\n  \"it-IT\": $4120bdb1d03484db$exports,\n  \"ja-JP\": $65e5e1569f34ea4f$exports,\n  \"ko-KR\": $d34552a7550967e7$exports,\n  \"lt-LT\": $8f855bffe63f6eca$exports,\n  \"lv-LV\": $ce40f46d09034645$exports,\n  \"nb-NO\": $dd1a9a73340c793e$exports,\n  \"nl-NL\": $4ee1fb3f0cbe6f59$exports,\n  \"pl-PL\": $c85829aebb0bc94b$exports,\n  \"pt-BR\": $27f5cd2291ca8a02$exports,\n  \"pt-PT\": $e046fdccd69bea8e$exports,\n  \"ro-RO\": $fa5f88e804986547$exports,\n  \"ru-RU\": $28e4714602d1b568$exports,\n  \"sk-SK\": $4e3bc8cf783ad569$exports,\n  \"sl-SI\": $bee07513333bdc15$exports,\n  \"sr-SP\": $7ed9c6fad16a15ec$exports,\n  \"sv-SE\": $8bef6d5a236de86c$exports,\n  \"tr-TR\": $098b9a2d2340cfc5$exports,\n  \"uk-UA\": $54a862ea7fad7419$exports,\n  \"zh-CN\": $e6cc491d590dfda5$exports,\n  \"zh-TW\": $9aebf53181a474bd$exports\n};\nconst $35a22f14a1f04b11$var$dictionary = new (0, $7UzoM$LocalizedStringDictionary)((0, ( /*@__PURE__*/$parcel$interopDefault($452ac34de8c2444e$exports))));\nfunction $35a22f14a1f04b11$var$getLocale() {\n  // Match browser language setting here, NOT react-aria's I18nProvider, so that we match other browser-provided\n  // validation messages, which to not respect our provider's language.\n  // @ts-ignore\n  return typeof navigator !== \"undefined\" && (navigator.language || navigator.userLanguage) || \"en-US\";\n}\nfunction $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, options) {\n  let rangeOverflow = value != null && maxValue != null && value.compare(maxValue) > 0;\n  let rangeUnderflow = value != null && minValue != null && value.compare(minValue) < 0;\n  let isUnavailable = value != null && (isDateUnavailable === null || isDateUnavailable === void 0 ? void 0 : isDateUnavailable(value)) || false;\n  let isInvalid = rangeOverflow || rangeUnderflow || isUnavailable;\n  let errors = [];\n  if (isInvalid) {\n    let locale = $35a22f14a1f04b11$var$getLocale();\n    let strings = (0, $7UzoM$LocalizedStringDictionary).getGlobalDictionaryForPackage(\"@react-stately/datepicker\") || $35a22f14a1f04b11$var$dictionary;\n    let formatter = new (0, $7UzoM$LocalizedStringFormatter)(locale, strings);\n    let dateFormatter = new (0, $7UzoM$DateFormatter)(locale, $35a22f14a1f04b11$export$7e319ea407e63bc0({}, options));\n    let timeZone = dateFormatter.resolvedOptions().timeZone;\n    if (rangeUnderflow) errors.push(formatter.format(\"rangeUnderflow\", {\n      minValue: dateFormatter.format(minValue.toDate(timeZone))\n    }));\n    if (rangeOverflow) errors.push(formatter.format(\"rangeOverflow\", {\n      maxValue: dateFormatter.format(maxValue.toDate(timeZone))\n    }));\n    if (isUnavailable) errors.push(formatter.format(\"unavailableDate\"));\n  }\n  return {\n    isInvalid: isInvalid,\n    validationErrors: errors,\n    validationDetails: {\n      badInput: isUnavailable,\n      customError: false,\n      patternMismatch: false,\n      rangeOverflow: rangeOverflow,\n      rangeUnderflow: rangeUnderflow,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      valid: !isInvalid\n    }\n  };\n}\nfunction $35a22f14a1f04b11$export$80ff8fc0ae339c13(value, minValue, maxValue, isDateUnavailable, options) {\n  let startValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.start, minValue, maxValue, isDateUnavailable, options);\n  let endValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.end, minValue, maxValue, isDateUnavailable, options);\n  let result = (0, $7UzoM$mergeValidation)(startValidation, endValidation);\n  if (value.end != null && value.start != null && value.end.compare(value.start) < 0) result = (0, $7UzoM$mergeValidation)(result, {\n    isInvalid: true,\n    validationErrors: [$35a22f14a1f04b11$var$dictionary.getStringForLocale(\"rangeReversed\", $35a22f14a1f04b11$var$getLocale())],\n    validationDetails: {\n      ...(0, $7UzoM$VALID_VALIDITY_STATE),\n      rangeUnderflow: true,\n      rangeOverflow: true,\n      valid: false\n    }\n  });\n  return result;\n}\nconst $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {\n  year: \"numeric\",\n  month: \"numeric\",\n  day: \"numeric\",\n  hour: \"numeric\",\n  minute: \"2-digit\",\n  second: \"2-digit\"\n};\nconst $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS = {\n  year: \"numeric\",\n  month: \"2-digit\",\n  day: \"2-digit\",\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  second: \"2-digit\"\n};\nfunction $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {\n  let defaultFieldOptions = options.shouldForceLeadingZeros ? $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS : $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS;\n  fieldOptions = {\n    ...defaultFieldOptions,\n    ...fieldOptions\n  };\n  let granularity = options.granularity || \"minute\";\n  let keys = Object.keys(fieldOptions);\n  var _options_maxGranularity;\n  let startIdx = keys.indexOf((_options_maxGranularity = options.maxGranularity) !== null && _options_maxGranularity !== void 0 ? _options_maxGranularity : \"year\");\n  if (startIdx < 0) startIdx = 0;\n  let endIdx = keys.indexOf(granularity);\n  if (endIdx < 0) endIdx = 2;\n  if (startIdx > endIdx) throw new Error(\"maxGranularity must be greater than granularity\");\n  let opts = keys.slice(startIdx, endIdx + 1).reduce((opts, key) => {\n    opts[key] = fieldOptions[key];\n    return opts;\n  }, {});\n  if (options.hourCycle != null) opts.hour12 = options.hourCycle === 12;\n  opts.timeZone = options.timeZone || \"UTC\";\n  let hasTime = granularity === \"hour\" || granularity === \"minute\" || granularity === \"second\";\n  if (hasTime && options.timeZone && !options.hideTimeZone) opts.timeZoneName = \"short\";\n  if (options.showEra && startIdx === 0) opts.era = \"short\";\n  return opts;\n}\nfunction $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {\n  if (placeholderValue && \"hour\" in placeholderValue) return placeholderValue;\n  return new (0, $7UzoM$Time)();\n}\nfunction $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {\n  if (value === null) return null;\n  if (!value) return undefined;\n  return (0, $7UzoM$toCalendar)(value, calendar);\n}\nfunction $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {\n  if (placeholderValue) return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);\n  let date = (0, $7UzoM$toCalendar)((0, $7UzoM$now)(timeZone).set({\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  }), calendar);\n  if (granularity === \"year\" || granularity === \"month\" || granularity === \"day\") return (0, $7UzoM$toCalendarDate)(date);\n  if (!timeZone) return (0, $7UzoM$toCalendarDateTime)(date);\n  return date;\n}\nfunction $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {\n  // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.\n  let defaultTimeZone = v && \"timeZone\" in v ? v.timeZone : undefined;\n  let defaultGranularity = v && \"minute\" in v ? \"minute\" : \"day\";\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && granularity && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n  let [lastValue, setLastValue] = (0, $7UzoM$useState)([defaultGranularity, defaultTimeZone]);\n  // If the granularity or time zone changed, update the last value.\n  if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone)) setLastValue([defaultGranularity, defaultTimeZone]);\n  if (!granularity) granularity = v ? defaultGranularity : lastValue[0];\n  let timeZone = v ? defaultTimeZone : lastValue[1];\n  return [granularity, timeZone];\n}\nfunction $ab5bf3f618090389$export$87194bb378cc3ac2(props) {\n  let overlayState = (0, $7UzoM$useOverlayTriggerState)(props);\n  let [value, setValue] = (0, $7UzoM$useControlledState)(props.value, props.defaultValue || null, props.onChange);\n  let v = value || props.placeholderValue;\n  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n  let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : \"UTC\") : null;\n  let hasTime = granularity === \"hour\" || granularity === \"minute\" || granularity === \"second\";\n  var _props_shouldCloseOnSelect;\n  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;\n  let [selectedDate, setSelectedDate] = (0, $7UzoM$useState)(null);\n  let [selectedTime, setSelectedTime] = (0, $7UzoM$useState)(null);\n  if (value) {\n    selectedDate = value;\n    if (\"hour\" in value) selectedTime = value;\n  }\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n  let showEra = (value === null || value === void 0 ? void 0 : value.calendar.identifier) === \"gregory\" && value.era === \"BC\";\n  let formatOpts = (0, $7UzoM$useMemo)(() => ({\n    granularity: granularity,\n    timeZone: defaultTimeZone,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    showEra: showEra\n  }), [granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, props.hideTimeZone, showEra]);\n  let {\n    minValue: minValue,\n    maxValue: maxValue,\n    isDateUnavailable: isDateUnavailable\n  } = props;\n  let builtinValidation = (0, $7UzoM$useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n  let validation = (0, $7UzoM$useFormValidationState)({\n    ...props,\n    value: value,\n    builtinValidation: builtinValidation\n  });\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n  let commitValue = (date, time) => {\n    setValue(\"timeZone\" in time ? time.set((0, $7UzoM$toCalendarDate)(date)) : (0, $7UzoM$toCalendarDateTime)(date, time));\n    setSelectedDate(null);\n    setSelectedTime(null);\n    validation.commitValidation();\n  };\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let selectDate = newValue => {\n    let shouldClose = typeof shouldCloseOnSelect === \"function\" ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (selectedTime || shouldClose) commitValue(newValue, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));else setSelectedDate(newValue);\n    } else {\n      setValue(newValue);\n      validation.commitValidation();\n    }\n    if (shouldClose) overlayState.setOpen(false);\n  };\n  let selectTime = newValue => {\n    if (selectedDate && newValue) commitValue(selectedDate, newValue);else setSelectedTime(newValue);\n  };\n  return {\n    ...validation,\n    value: value,\n    setValue: setValue,\n    dateValue: selectedDate,\n    timeValue: selectedTime,\n    setDateValue: selectDate,\n    setTimeValue: selectTime,\n    granularity: granularity,\n    hasTime: hasTime,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time was set and not the date, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !value && selectedDate && hasTime) commitValue(selectedDate, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));\n      overlayState.setOpen(isOpen);\n    },\n    validationState: validationState,\n    isInvalid: isValueInvalid,\n    formatValue(locale, fieldOptions) {\n      if (!dateValue) return \"\";\n      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n      let formatter = new (0, $7UzoM$DateFormatter)(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// These placeholders are based on the strings used by the <input type=\"date\">\n// implementations in Chrome and Firefox. Additional languages are supported\n// here than React Spectrum's typical translations.\nconst $3e3ed55ab2966714$var$placeholders = new (0, $7UzoM$LocalizedStringDictionary)({\n  ach: {\n    year: \"mwaka\",\n    month: \"dwe\",\n    day: \"nino\"\n  },\n  af: {\n    year: \"jjjj\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  am: {\n    year: \"\\u12D3\\u12D3\\u12D3\\u12D3\",\n    month: \"\\u121A\\u121C\",\n    day: \"\\u1240\\u1240\"\n  },\n  an: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  ar: {\n    year: \"\\u0633\\u0646\\u0629\",\n    month: \"\\u0634\\u0647\\u0631\",\n    day: \"\\u064A\\u0648\\u0645\"\n  },\n  ast: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  az: {\n    year: \"iiii\",\n    month: \"aa\",\n    day: \"gg\"\n  },\n  be: {\n    year: \"\\u0433\\u0433\\u0433\\u0433\",\n    month: \"\\u043C\\u043C\",\n    day: \"\\u0434\\u0434\"\n  },\n  bg: {\n    year: \"\\u0433\\u0433\\u0433\\u0433\",\n    month: \"\\u043C\\u043C\",\n    day: \"\\u0434\\u0434\"\n  },\n  bn: {\n    year: \"yyyy\",\n    month: \"\\u09AE\\u09BF\\u09AE\\u09BF\",\n    day: \"dd\"\n  },\n  br: {\n    year: \"bbbb\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  bs: {\n    year: \"gggg\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  ca: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  cak: {\n    year: \"jjjj\",\n    month: \"ii\",\n    day: \"q'q'\"\n  },\n  ckb: {\n    year: \"\\u0633\\u0627\\u06B5\",\n    month: \"\\u0645\\u0627\\u0646\\u06AF\",\n    day: \"\\u0695\\u06C6\\u0698\"\n  },\n  cs: {\n    year: \"rrrr\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  cy: {\n    year: \"bbbb\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  da: {\n    year: \"\\xe5\\xe5\\xe5\\xe5\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  de: {\n    year: \"jjjj\",\n    month: \"mm\",\n    day: \"tt\"\n  },\n  dsb: {\n    year: \"llll\",\n    month: \"mm\",\n    day: \"\\u017A\\u017A\"\n  },\n  el: {\n    year: \"\\u03B5\\u03B5\\u03B5\\u03B5\",\n    month: \"\\u03BC\\u03BC\",\n    day: \"\\u03B7\\u03B7\"\n  },\n  en: {\n    year: \"yyyy\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  eo: {\n    year: \"jjjj\",\n    month: \"mm\",\n    day: \"tt\"\n  },\n  es: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  et: {\n    year: \"aaaa\",\n    month: \"kk\",\n    day: \"pp\"\n  },\n  eu: {\n    year: \"uuuu\",\n    month: \"hh\",\n    day: \"ee\"\n  },\n  fa: {\n    year: \"\\u0633\\u0627\\u0644\",\n    month: \"\\u0645\\u0627\\u0647\",\n    day: \"\\u0631\\u0648\\u0632\"\n  },\n  ff: {\n    year: \"hhhh\",\n    month: \"ll\",\n    day: \"\\xf1\\xf1\"\n  },\n  fi: {\n    year: \"vvvv\",\n    month: \"kk\",\n    day: \"pp\"\n  },\n  fr: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"jj\"\n  },\n  fy: {\n    year: \"jjjj\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  ga: {\n    year: \"bbbb\",\n    month: \"mm\",\n    day: \"ll\"\n  },\n  gd: {\n    year: \"bbbb\",\n    month: \"mm\",\n    day: \"ll\"\n  },\n  gl: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  he: {\n    year: \"\\u05E9\\u05E0\\u05D4\",\n    month: \"\\u05D7\\u05D5\\u05D3\\u05E9\",\n    day: \"\\u05D9\\u05D5\\u05DD\"\n  },\n  hr: {\n    year: \"gggg\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  hsb: {\n    year: \"llll\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  hu: {\n    year: \"\\xe9\\xe9\\xe9\\xe9\",\n    month: \"hh\",\n    day: \"nn\"\n  },\n  ia: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  id: {\n    year: \"tttt\",\n    month: \"bb\",\n    day: \"hh\"\n  },\n  it: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"gg\"\n  },\n  ja: {\n    year: \" \\u5E74 \",\n    month: \"\\u6708\",\n    day: \"\\u65E5\"\n  },\n  ka: {\n    year: \"\\u10EC\\u10EC\\u10EC\\u10EC\",\n    month: \"\\u10D7\\u10D7\",\n    day: \"\\u10E0\\u10E0\"\n  },\n  kk: {\n    year: \"\\u0436\\u0436\\u0436\\u0436\",\n    month: \"\\u0430\\u0430\",\n    day: \"\\u043A\\u043A\"\n  },\n  kn: {\n    year: \"\\u0CB5\\u0CB5\\u0CB5\\u0CB5\",\n    month: \"\\u0CAE\\u0CBF\\u0CAE\\u0CC0\",\n    day: \"\\u0CA6\\u0CBF\\u0CA6\\u0CBF\"\n  },\n  ko: {\n    year: \"\\uC5F0\\uB3C4\",\n    month: \"\\uC6D4\",\n    day: \"\\uC77C\"\n  },\n  lb: {\n    year: \"jjjj\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  lo: {\n    year: \"\\u0E9B\\u0E9B\\u0E9B\\u0E9B\",\n    month: \"\\u0E94\\u0E94\",\n    day: \"\\u0EA7\\u0EA7\"\n  },\n  lt: {\n    year: \"mmmm\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  lv: {\n    year: \"gggg\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  meh: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  ml: {\n    year: \"\\u0D35\\u0D7C\\u0D37\\u0D02\",\n    month: \"\\u0D2E\\u0D3E\\u0D38\\u0D02\",\n    day: \"\\u0D24\\u0D40\\u0D2F\\u0D24\\u0D3F\"\n  },\n  ms: {\n    year: \"tttt\",\n    month: \"mm\",\n    day: \"hh\"\n  },\n  nl: {\n    year: \"jjjj\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  nn: {\n    year: \"\\xe5\\xe5\\xe5\\xe5\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  no: {\n    year: \"\\xe5\\xe5\\xe5\\xe5\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  oc: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"jj\"\n  },\n  pl: {\n    year: \"rrrr\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  pt: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  rm: {\n    year: \"oooo\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  ro: {\n    year: \"aaaa\",\n    month: \"ll\",\n    day: \"zz\"\n  },\n  ru: {\n    year: \"\\u0433\\u0433\\u0433\\u0433\",\n    month: \"\\u043C\\u043C\",\n    day: \"\\u0434\\u0434\"\n  },\n  sc: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  scn: {\n    year: \"aaaa\",\n    month: \"mm\",\n    day: \"jj\"\n  },\n  sk: {\n    year: \"rrrr\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  sl: {\n    year: \"llll\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  sr: {\n    year: \"\\u0433\\u0433\\u0433\\u0433\",\n    month: \"\\u043C\\u043C\",\n    day: \"\\u0434\\u0434\"\n  },\n  sv: {\n    year: \"\\xe5\\xe5\\xe5\\xe5\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  szl: {\n    year: \"rrrr\",\n    month: \"mm\",\n    day: \"dd\"\n  },\n  tg: {\n    year: \"\\u0441\\u0441\\u0441\\u0441\",\n    month: \"\\u043C\\u043C\",\n    day: \"\\u0440\\u0440\"\n  },\n  th: {\n    year: \"\\u0E1B\\u0E1B\\u0E1B\\u0E1B\",\n    month: \"\\u0E14\\u0E14\",\n    day: \"\\u0E27\\u0E27\"\n  },\n  tr: {\n    year: \"yyyy\",\n    month: \"aa\",\n    day: \"gg\"\n  },\n  uk: {\n    year: \"\\u0440\\u0440\\u0440\\u0440\",\n    month: \"\\u043C\\u043C\",\n    day: \"\\u0434\\u0434\"\n  },\n  \"zh-CN\": {\n    year: \"\\u5E74\",\n    month: \"\\u6708\",\n    day: \"\\u65E5\"\n  },\n  \"zh-TW\": {\n    year: \"\\u5E74\",\n    month: \"\\u6708\",\n    day: \"\\u65E5\"\n  }\n}, \"en\");\nfunction $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {\n  // Use the actual placeholder value for the era and day period fields.\n  if (field === \"era\" || field === \"dayPeriod\") return value;\n  if (field === \"year\" || field === \"month\" || field === \"day\") return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);\n  // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.\n  return \"\\u2013\\u2013\";\n}\nconst $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\nconst $3c0fc76039f1c516$var$PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n// Node seems to convert everything to lowercase...\nconst $3c0fc76039f1c516$var$TYPE_MAPPING = {\n  dayperiod: \"dayPeriod\"\n};\nfunction $3c0fc76039f1c516$export$60e84778edff6d26(props) {\n  let {\n    locale: locale,\n    createCalendar: createCalendar,\n    hideTimeZone: hideTimeZone,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    minValue: minValue,\n    maxValue: maxValue,\n    isDateUnavailable: isDateUnavailable\n  } = props;\n  let v = props.value || props.defaultValue || props.placeholderValue;\n  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n  let timeZone = defaultTimeZone || \"UTC\";\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n  let defaultFormatter = (0, $7UzoM$useMemo)(() => new (0, $7UzoM$DateFormatter)(locale), [locale]);\n  let calendar = (0, $7UzoM$useMemo)(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n  let [value, setDate] = (0, $7UzoM$useControlledState)(props.value, props.defaultValue, props.onChange);\n  let calendarValue = (0, $7UzoM$useMemo)(() => (0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [value, calendar]);\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = (0, $7UzoM$useState)(() => (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === \"gregory\" && val.era === \"BC\";\n  let formatOpts = (0, $7UzoM$useMemo)(() => {\n    var _props_maxGranularity;\n    return {\n      granularity: granularity,\n      maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : \"year\",\n      timeZone: defaultTimeZone,\n      hideTimeZone: hideTimeZone,\n      hourCycle: props.hourCycle,\n      showEra: showEra,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros\n    };\n  }, [props.maxGranularity, granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = (0, $7UzoM$useMemo)(() => (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [formatOpts]);\n  let dateFormatter = (0, $7UzoM$useMemo)(() => new (0, $7UzoM$DateFormatter)(locale, opts), [locale, opts]);\n  let resolvedOptions = (0, $7UzoM$useMemo)(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments = (0, $7UzoM$useMemo)(() => dateFormatter.formatToParts(new Date()).filter(seg => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[seg.type] = true, p), {}), [dateFormatter]);\n  let [validSegments, setValidSegments] = (0, $7UzoM$useState)(() => props.value || props.defaultValue ? {\n    ...allSegments\n  } : {});\n  let clearedSegment = (0, $7UzoM$useRef)();\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = (0, $7UzoM$useRef)(calendar.identifier);\n  (0, $7UzoM$useEffect)(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder => Object.keys(validSegments).length > 0 ? (0, $7UzoM$toCalendar)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {\n      ...allSegments\n    };\n    setValidSegments(validSegments);\n  }\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = newValue => {\n    if (props.isDisabled || props.isReadOnly) return;\n    let validKeys = Object.keys(validSegments);\n    let allKeys = Object.keys(allSegments);\n    // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n    if (newValue == null) {\n      setDate(null);\n      setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n      setValidSegments({});\n    } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== \"dayPeriod\") {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = (0, $7UzoM$toCalendar)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, $7UzoM$GregorianCalendar)());\n      setDate(newValue);\n    } else setPlaceholderDate(newValue);\n    clearedSegment.current = null;\n  };\n  let dateValue = (0, $7UzoM$useMemo)(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = (0, $7UzoM$useMemo)(() => dateFormatter.formatToParts(dateValue).map(segment => {\n    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];\n    if (segment.type === \"era\" && calendar.getEras().length === 1) isEditable = false;\n    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;\n    return {\n      type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,\n      text: isPlaceholder ? placeholder : segment.value,\n      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),\n      isPlaceholder: isPlaceholder,\n      placeholder: placeholder,\n      isEditable: isEditable\n    };\n  }), [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({\n      ...validSegments\n    });\n  }\n  let markValid = part => {\n    validSegments[part] = true;\n    if (part === \"year\" && allSegments.era) validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  };\n  let adjustSegment = (type, amount) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);\n    } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));\n  };\n  let builtinValidation = (0, $7UzoM$useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n  let validation = (0, $7UzoM$useFormValidationState)({\n    ...props,\n    value: value,\n    builtinValidation: builtinValidation\n  });\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n  var _props_maxGranularity;\n  return {\n    ...validation,\n    value: calendarValue,\n    dateValue: dateValue,\n    calendar: calendar,\n    setValue: setValue,\n    segments: segments,\n    dateFormatter: dateFormatter,\n    validationState: validationState,\n    isInvalid: isValueInvalid,\n    granularity: granularity,\n    maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : \"year\",\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) return;\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {\n          ...allSegments\n        };\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      clearedSegment.current = part;\n      setValidSegments({\n        ...validSegments\n      });\n      let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n      // Reset day period to default without changing the hour.\n      if (part === \"dayPeriod\" && \"hour\" in displayValue && \"hour\" in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) value = displayValue.set({\n          hour: displayValue.hour - 12\n        });else if (!isPM && shouldBePM) value = displayValue.set({\n          hour: displayValue.hour + 12\n        });\n      } else if (part in displayValue) value = displayValue.set({\n        [part]: placeholder[part]\n      });\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions) {\n      if (!calendarValue) return \"\";\n      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n      let formatter = new (0, $7UzoM$DateFormatter)(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\nfunction $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {\n  switch (type) {\n    case \"era\":\n      {\n        let eras = date.calendar.getEras();\n        return {\n          value: eras.indexOf(date.era),\n          minValue: 0,\n          maxValue: eras.length - 1\n        };\n      }\n    case \"year\":\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case \"month\":\n      return {\n        value: date.month,\n        minValue: (0, $7UzoM$getMinimumMonthInYear)(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case \"day\":\n      return {\n        value: date.day,\n        minValue: (0, $7UzoM$getMinimumDayInMonth)(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n  if (\"hour\" in date) switch (type) {\n    case \"dayPeriod\":\n      return {\n        value: date.hour >= 12 ? 12 : 0,\n        minValue: 0,\n        maxValue: 12\n      };\n    case \"hour\":\n      if (options.hour12) {\n        let isPM = date.hour >= 12;\n        return {\n          value: date.hour,\n          minValue: isPM ? 12 : 0,\n          maxValue: isPM ? 23 : 11\n        };\n      }\n      return {\n        value: date.hour,\n        minValue: 0,\n        maxValue: 23\n      };\n    case \"minute\":\n      return {\n        value: date.minute,\n        minValue: 0,\n        maxValue: 59\n      };\n    case \"second\":\n      return {\n        value: date.second,\n        minValue: 0,\n        maxValue: 59\n      };\n  }\n  return {};\n}\nfunction $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {\n  switch (part) {\n    case \"era\":\n    case \"year\":\n    case \"month\":\n    case \"day\":\n      return value.cycle(part, amount, {\n        round: part === \"year\"\n      });\n  }\n  if (\"hour\" in value) switch (part) {\n    case \"dayPeriod\":\n      {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({\n          hour: isPM ? hours - 12 : hours + 12\n        });\n      }\n    case \"hour\":\n    case \"minute\":\n    case \"second\":\n      return value.cycle(part, amount, {\n        round: part !== \"hour\",\n        hourCycle: options.hour12 ? 12 : 24\n      });\n  }\n}\nfunction $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {\n  switch (part) {\n    case \"day\":\n    case \"month\":\n    case \"year\":\n    case \"era\":\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n  if (\"hour\" in value) switch (part) {\n    case \"dayPeriod\":\n      {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) return value;\n        return value.set({\n          hour: wasPM ? hours - 12 : hours + 12\n        });\n      }\n    case \"hour\":\n      // In 12 hour time, ensure that AM/PM does not change\n      if (options.hour12) {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        if (!wasPM && segmentValue === 12) segmentValue = 0;\n        if (wasPM && segmentValue < 12) segmentValue += 12;\n      }\n    // fallthrough\n    case \"minute\":\n    case \"second\":\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $93c38a5e28be6249$export$e50a61c1de9f574(props) {\n  var _value_start, _value_end;\n  let overlayState = (0, $7UzoM$useOverlayTriggerState)(props);\n  let [controlledValue, setControlledValue] = (0, $7UzoM$useControlledState)(props.value, props.defaultValue || null, props.onChange);\n  let [placeholderValue, setPlaceholderValue] = (0, $7UzoM$useState)(() => controlledValue || {\n    start: null,\n    end: null\n  });\n  // Reset the placeholder if the value prop is set to null.\n  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {\n    placeholderValue = {\n      start: null,\n      end: null\n    };\n    setPlaceholderValue(placeholderValue);\n  }\n  let value = controlledValue || placeholderValue;\n  let setValue = value => {\n    setPlaceholderValue(value || {\n      start: null,\n      end: null\n    });\n    if ((value === null || value === void 0 ? void 0 : value.start) && value.end) setControlledValue(value);else setControlledValue(null);\n  };\n  let v = (value === null || value === void 0 ? void 0 : value.start) || (value === null || value === void 0 ? void 0 : value.end) || props.placeholderValue;\n  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n  let hasTime = granularity === \"hour\" || granularity === \"minute\" || granularity === \"second\";\n  var _props_shouldCloseOnSelect;\n  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;\n  let [dateRange, setSelectedDateRange] = (0, $7UzoM$useState)(null);\n  let [timeRange, setSelectedTimeRange] = (0, $7UzoM$useState)(null);\n  if (value && value.start && value.end) {\n    dateRange = value;\n    if (\"hour\" in value.start) timeRange = value;\n  }\n  let commitValue = (dateRange, timeRange) => {\n    setValue({\n      start: \"timeZone\" in timeRange.start ? timeRange.start.set((0, $7UzoM$toCalendarDate)(dateRange.start)) : (0, $7UzoM$toCalendarDateTime)(dateRange.start, timeRange.start),\n      end: \"timeZone\" in timeRange.end ? timeRange.end.set((0, $7UzoM$toCalendarDate)(dateRange.end)) : (0, $7UzoM$toCalendarDateTime)(dateRange.end, timeRange.end)\n    });\n    setSelectedDateRange(null);\n    setSelectedTimeRange(null);\n    validation.commitValidation();\n  };\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let setDateRange = range => {\n    let shouldClose = typeof shouldCloseOnSelect === \"function\" ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (shouldClose || range.start && range.end && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end)) commitValue(range, {\n        start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),\n        end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)\n      });else setSelectedDateRange(range);\n    } else if (range.start && range.end) {\n      setValue(range);\n      validation.commitValidation();\n    } else setSelectedDateRange(range);\n    if (shouldClose) overlayState.setOpen(false);\n  };\n  let setTimeRange = range => {\n    if ((dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && range.start && range.end) commitValue(dateRange, range);else setSelectedTimeRange(range);\n  };\n  let showEra = (value === null || value === void 0 ? void 0 : (_value_start = value.start) === null || _value_start === void 0 ? void 0 : _value_start.calendar.identifier) === \"gregory\" && value.start.era === \"BC\" || (value === null || value === void 0 ? void 0 : (_value_end = value.end) === null || _value_end === void 0 ? void 0 : _value_end.calendar.identifier) === \"gregory\" && value.end.era === \"BC\";\n  let formatOpts = (0, $7UzoM$useMemo)(() => ({\n    granularity: granularity,\n    timeZone: defaultTimeZone,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    showEra: showEra\n  }), [granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, props.hideTimeZone, showEra]);\n  let {\n    minValue: minValue,\n    maxValue: maxValue,\n    isDateUnavailable: isDateUnavailable\n  } = props;\n  let builtinValidation = (0, $7UzoM$useMemo)(() => (0, $35a22f14a1f04b11$export$80ff8fc0ae339c13)(value, minValue, maxValue, isDateUnavailable, formatOpts), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n  let validation = (0, $7UzoM$useFormValidationState)({\n    ...props,\n    value: controlledValue,\n    name: (0, $7UzoM$useMemo)(() => [props.startName, props.endName], [props.startName, props.endName]),\n    builtinValidation: builtinValidation\n  });\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n  return {\n    ...validation,\n    value: value,\n    setValue: setValue,\n    dateRange: dateRange,\n    timeRange: timeRange,\n    granularity: granularity,\n    hasTime: hasTime,\n    setDate(part, date) {\n      setDateRange({\n        ...dateRange,\n        [part]: date\n      });\n    },\n    setTime(part, time) {\n      setTimeRange({\n        ...timeRange,\n        [part]: time\n      });\n    },\n    setDateTime(part, dateTime) {\n      setValue({\n        ...value,\n        [part]: dateTime\n      });\n    },\n    setDateRange: setDateRange,\n    setTimeRange: setTimeRange,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time range was set and not the date range, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !((value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && hasTime) commitValue(dateRange, {\n        start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),\n        end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)\n      });\n      overlayState.setOpen(isOpen);\n    },\n    validationState: validationState,\n    isInvalid: isValueInvalid,\n    formatValue(locale, fieldOptions) {\n      if (!value || !value.start || !value.end) return null;\n      let startTimeZone = \"timeZone\" in value.start ? value.start.timeZone : undefined;\n      let startGranularity = props.granularity || (value.start && \"minute\" in value.start ? \"minute\" : \"day\");\n      let endTimeZone = \"timeZone\" in value.end ? value.end.timeZone : undefined;\n      let endGranularity = props.granularity || (value.end && \"minute\" in value.end ? \"minute\" : \"day\");\n      let startOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {\n        granularity: startGranularity,\n        timeZone: startTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: value.start.calendar.identifier === \"gregory\" && value.start.era === \"BC\" || value.end.calendar.identifier === \"gregory\" && value.end.era === \"BC\"\n      });\n      let startDate = value.start.toDate(startTimeZone || \"UTC\");\n      let endDate = value.end.toDate(endTimeZone || \"UTC\");\n      let startFormatter = new (0, $7UzoM$DateFormatter)(locale, startOptions);\n      let endFormatter;\n      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {\n        // Use formatRange, as it results in shorter output when some of the fields\n        // are shared between the start and end dates (e.g. the same month).\n        // Formatting will fail if the end date is before the start date. Fall back below when that happens.\n        try {\n          let parts = startFormatter.formatRangeToParts(startDate, endDate);\n          // Find the separator between the start and end date. This is determined\n          // by finding the last shared literal before the end range.\n          let separatorIndex = -1;\n          for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            if (part.source === \"shared\" && part.type === \"literal\") separatorIndex = i;else if (part.source === \"endRange\") break;\n          }\n          // Now we can combine the parts into start and end strings.\n          let start = \"\";\n          let end = \"\";\n          for (let i = 0; i < parts.length; i++) {\n            if (i < separatorIndex) start += parts[i].value;else if (i > separatorIndex) end += parts[i].value;\n          }\n          return {\n            start: start,\n            end: end\n          };\n        } catch (e) {\n          // ignore\n        }\n        endFormatter = startFormatter;\n      } else {\n        let endOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {\n          granularity: endGranularity,\n          timeZone: endTimeZone,\n          hideTimeZone: props.hideTimeZone,\n          hourCycle: props.hourCycle\n        });\n        endFormatter = new (0, $7UzoM$DateFormatter)(locale, endOptions);\n      }\n      return {\n        start: startFormatter.format(startDate),\n        end: endFormatter.format(endDate)\n      };\n    }\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $eff5d8ee529ac4bb$export$fd53cef0cc796101(props) {\n  let {\n    placeholderValue = new (0, $7UzoM$Time)(),\n    minValue: minValue,\n    maxValue: maxValue,\n    granularity: granularity,\n    validate: validate\n  } = props;\n  let [value, setValue] = (0, $7UzoM$useControlledState)(props.value, props.defaultValue, props.onChange);\n  let v = value || placeholderValue;\n  let day = v && \"day\" in v ? v : undefined;\n  let defaultValueTimeZone = props.defaultValue && \"timeZone\" in props.defaultValue ? props.defaultValue.timeZone : undefined;\n  let placeholderDate = (0, $7UzoM$useMemo)(() => {\n    let valueTimeZone = v && \"timeZone\" in v ? v.timeZone : undefined;\n    return (valueTimeZone || defaultValueTimeZone) && placeholderValue ? (0, $7UzoM$toZoned)($eff5d8ee529ac4bb$var$convertValue(placeholderValue), valueTimeZone || defaultValueTimeZone) : $eff5d8ee529ac4bb$var$convertValue(placeholderValue);\n  }, [placeholderValue, v, defaultValueTimeZone]);\n  let minDate = (0, $7UzoM$useMemo)(() => $eff5d8ee529ac4bb$var$convertValue(minValue, day), [minValue, day]);\n  let maxDate = (0, $7UzoM$useMemo)(() => $eff5d8ee529ac4bb$var$convertValue(maxValue, day), [maxValue, day]);\n  let timeValue = (0, $7UzoM$useMemo)(() => value && \"day\" in value ? (0, $7UzoM$toTime)(value) : value, [value]);\n  let dateTime = (0, $7UzoM$useMemo)(() => value == null ? null : $eff5d8ee529ac4bb$var$convertValue(value), [value]);\n  let onChange = newValue => {\n    setValue(day || defaultValueTimeZone ? newValue : newValue && (0, $7UzoM$toTime)(newValue));\n  };\n  let state = (0, $3c0fc76039f1c516$export$60e84778edff6d26)({\n    ...props,\n    value: dateTime,\n    defaultValue: undefined,\n    minValue: minDate,\n    maxValue: maxDate,\n    onChange: onChange,\n    granularity: granularity || \"minute\",\n    maxGranularity: \"hour\",\n    placeholderValue: placeholderDate,\n    // Calendar should not matter for time fields.\n    createCalendar: () => new (0, $7UzoM$GregorianCalendar)(),\n    validate: (0, $7UzoM$useCallback)(() => validate === null || validate === void 0 ? void 0 : validate(value), [validate, value])\n  });\n  return {\n    ...state,\n    timeValue: timeValue\n  };\n}\nfunction $eff5d8ee529ac4bb$var$convertValue(value, date = (0, $7UzoM$today)((0, $7UzoM$getLocalTimeZone)())) {\n  if (!value) return null;\n  if (\"day\" in value) return value;\n  return (0, $7UzoM$toCalendarDateTime)(date, value);\n}\nexport { $ab5bf3f618090389$export$87194bb378cc3ac2 as useDatePickerState, $3c0fc76039f1c516$export$60e84778edff6d26 as useDateFieldState, $93c38a5e28be6249$export$e50a61c1de9f574 as useDateRangePickerState, $eff5d8ee529ac4bb$export$fd53cef0cc796101 as useTimeFieldState };","map":{"version":3,"names":["$452ac34de8c2444e$exports","$b3427c06585c22a0$exports","$d282528f459122b9$exports","$2d5eecd634a9ca45$exports","$c8e2288226c24a67$exports","$6f5745e389c346d7$exports","$8c882ccf4300d1da$exports","$22195056771860be$exports","$cedfa43b4e2a5906$exports","$eeeaa8daee3601c7$exports","$35e0614a49b3bb40$exports","$929bc63f7705a78f$exports","$9a28d073b034d183$exports","$7743e79780ebcca3$exports","$3351817a04898858$exports","$4120bdb1d03484db$exports","$65e5e1569f34ea4f$exports","$d34552a7550967e7$exports","$8f855bffe63f6eca$exports","$ce40f46d09034645$exports","$dd1a9a73340c793e$exports","$4ee1fb3f0cbe6f59$exports","$c85829aebb0bc94b$exports","$27f5cd2291ca8a02$exports","$e046fdccd69bea8e$exports","$fa5f88e804986547$exports","$28e4714602d1b568$exports","$4e3bc8cf783ad569$exports","$bee07513333bdc15$exports","$7ed9c6fad16a15ec$exports","$8bef6d5a236de86c$exports","$098b9a2d2340cfc5$exports","$54a862ea7fad7419$exports","$e6cc491d590dfda5$exports","$9aebf53181a474bd$exports","$35a22f14a1f04b11$var$dictionary","$7UzoM$LocalizedStringDictionary","$parcel$interopDefault","$35a22f14a1f04b11$var$getLocale","navigator","language","userLanguage","$35a22f14a1f04b11$export$f18627323ab57ac0","value","minValue","maxValue","isDateUnavailable","options","rangeOverflow","compare","rangeUnderflow","isUnavailable","isInvalid","errors","locale","strings","getGlobalDictionaryForPackage","formatter","$7UzoM$LocalizedStringFormatter","dateFormatter","$7UzoM$DateFormatter","$35a22f14a1f04b11$export$7e319ea407e63bc0","timeZone","resolvedOptions","push","format","toDate","validationErrors","validationDetails","badInput","customError","patternMismatch","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","valid","$35a22f14a1f04b11$export$80ff8fc0ae339c13","startValidation","start","endValidation","end","result","$7UzoM$mergeValidation","getStringForLocale","$7UzoM$VALID_VALIDITY_STATE","$35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS","year","month","day","hour","minute","second","$35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS","fieldOptions","defaultFieldOptions","shouldForceLeadingZeros","granularity","keys","Object","_options_maxGranularity","startIdx","indexOf","maxGranularity","endIdx","Error","opts","slice","reduce","key","hourCycle","hour12","hasTime","hideTimeZone","timeZoneName","showEra","era","$35a22f14a1f04b11$export$c5221a78ef73c5e9","placeholderValue","$7UzoM$Time","$35a22f14a1f04b11$export$61a490a80c552550","calendar","undefined","$7UzoM$toCalendar","$35a22f14a1f04b11$export$66aa2b09de4b1ea5","date","$7UzoM$now","set","millisecond","$7UzoM$toCalendarDate","$7UzoM$toCalendarDateTime","$35a22f14a1f04b11$export$2440da353cedad43","v","defaultTimeZone","defaultGranularity","toString","lastValue","setLastValue","$7UzoM$useState","$ab5bf3f618090389$export$87194bb378cc3ac2","props","overlayState","$7UzoM$useOverlayTriggerState","setValue","$7UzoM$useControlledState","defaultValue","onChange","dateValue","_props_shouldCloseOnSelect","shouldCloseOnSelect","selectedDate","setSelectedDate","selectedTime","setSelectedTime","identifier","formatOpts","$7UzoM$useMemo","builtinValidation","validation","$7UzoM$useFormValidationState","isValueInvalid","displayValidation","validationState","commitValue","time","commitValidation","selectDate","newValue","shouldClose","setOpen","selectTime","timeValue","setDateValue","setTimeValue","isOpen","formatValue","formatOptions","$3e3ed55ab2966714$var$placeholders","ach","af","am","an","ar","ast","az","be","bg","bn","br","bs","ca","cak","ckb","cs","cy","da","de","dsb","el","en","eo","es","et","eu","fa","ff","fi","fr","fy","ga","gd","gl","he","hr","hsb","hu","ia","id","it","ja","ka","kk","kn","ko","lb","lo","lt","lv","meh","ml","ms","nl","nn","no","oc","pl","pt","rm","ro","ru","sc","scn","sk","sl","sr","sv","szl","tg","th","tr","uk","$3e3ed55ab2966714$export$d3f5c5e0a5023fa0","field","$3c0fc76039f1c516$var$EDITABLE_SEGMENTS","dayPeriod","$3c0fc76039f1c516$var$PAGE_STEP","$3c0fc76039f1c516$var$TYPE_MAPPING","dayperiod","$3c0fc76039f1c516$export$60e84778edff6d26","createCalendar","isDisabled","isReadOnly","isRequired","defaultFormatter","setDate","calendarValue","placeholderDate","setPlaceholderDate","val","_props_maxGranularity","allSegments","formatToParts","Date","filter","seg","type","p","validSegments","setValidSegments","clearedSegment","$7UzoM$useRef","lastCalendarIdentifier","$7UzoM$useEffect","current","placeholder","length","displayValue","validKeys","allKeys","$7UzoM$GregorianCalendar","segments","map","segment","isEditable","getEras","isPlaceholder","text","$3c0fc76039f1c516$var$getSegmentLimits","markValid","part","adjustSegment","amount","$3c0fc76039f1c516$var$addSegment","increment","decrement","incrementPage","decrementPage","setSegment","$3c0fc76039f1c516$var$setSegment","confirmPlaceholder","copy","clearSegment","isPM","shouldBePM","eras","getYearsInEra","$7UzoM$getMinimumMonthInYear","getMonthsInYear","$7UzoM$getMinimumDayInMonth","getDaysInMonth","cycle","round","hours","segmentValue","wasPM","$93c38a5e28be6249$export$e50a61c1de9f574","_value_start","_value_end","controlledValue","setControlledValue","setPlaceholderValue","dateRange","setSelectedDateRange","timeRange","setSelectedTimeRange","setDateRange","range","setTimeRange","name","startName","endName","setTime","setDateTime","dateTime","startTimeZone","startGranularity","endTimeZone","endGranularity","startOptions","startDate","endDate","startFormatter","endFormatter","parts","formatRangeToParts","separatorIndex","i","source","e","endOptions","$eff5d8ee529ac4bb$export$fd53cef0cc796101","validate","defaultValueTimeZone","valueTimeZone","$7UzoM$toZoned","$eff5d8ee529ac4bb$var$convertValue","minDate","maxDate","$7UzoM$toTime","state","$7UzoM$useCallback","$7UzoM$today","$7UzoM$getLocalTimeZone"],"sources":["C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\index.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\useDatePickerState.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\utils.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\*.js","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\useDateFieldState.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\placeholders.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\useDateRangePickerState.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\useTimeFieldState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useDatePickerState} from './useDatePickerState';\nexport {useDateFieldState} from './useDateFieldState';\nexport {useDateRangePickerState} from './useDateRangePickerState';\nexport {useTimeFieldState} from './useTimeFieldState';\n\nexport type {DateFieldStateOptions, DateFieldState, DateSegment, SegmentType} from './useDateFieldState';\nexport type {DatePickerStateOptions, DatePickerState} from './useDatePickerState';\nexport type {DateRangePickerStateOptions, DateRangePickerState} from './useDateRangePickerState';\nexport type {TimeFieldStateOptions, TimeFieldState} from './useTimeFieldState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, DateFormatter, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DatePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {FieldOptions, getFormatOptions, getPlaceholderTime, getValidationResult, useDefaultProps} from './utils';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface DatePickerStateOptions<T extends DateValue> extends DatePickerProps<T> {\n  /**\n   * Determines whether the date picker popover should close automatically when a date is selected.\n   * @default true\n   */\n  shouldCloseOnSelect?: boolean | (() => boolean)\n}\n\nexport interface DatePickerState extends OverlayTriggerState, FormValidationState {\n  /** The currently selected date. */\n  value: DateValue | null,\n  /** Sets the selected date. */\n  setValue(value: DateValue | null): void,\n  /**\n   * The date portion of the value. This may be set prior to `value` if the user has\n   * selected a date but has not yet selected a time.\n   */\n  dateValue: DateValue,\n  /** Sets the date portion of the value. */\n  setDateValue(value: CalendarDate): void,\n  /**\n   * The time portion of the value. This may be set prior to `value` if the user has\n   * selected a time but has not yet selected a date.\n   */\n  timeValue: TimeValue,\n  /** Sets the time portion of the value. */\n  setTimeValue(value: TimeValue): void,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** Whether the date picker supports selecting a time, according to the `granularity` prop and current value. */\n  hasTime: boolean,\n  /** Whether the calendar popover is currently open. */\n  isOpen: boolean,\n  /** Sets whether the calendar popover is open. */\n  setOpen(isOpen: boolean): void,\n  /**\n   * The current validation state of the date picker, based on the `validationState`, `minValue`, and `maxValue` props.\n   * @deprecated Use `isInvalid` instead.\n   */\n  validationState: ValidationState,\n  /** Whether the date picker is invalid, based on the `isInvalid`, `minValue`, and `maxValue` props. */\n  isInvalid: boolean,\n  /** Formats the selected value using the given options. */\n  formatValue(locale: string, fieldOptions: FieldOptions): string\n}\n\n/**\n * Provides state management for a date picker component.\n * A date picker combines a DateField and a Calendar popover to allow users to enter or select a date and time value.\n */\nexport function useDatePickerState<T extends DateValue = DateValue>(props: DatePickerStateOptions<T>): DatePickerState {\n  let overlayState = useOverlayTriggerState(props);\n  let [value, setValue] = useControlledState<DateValue>(props.value, props.defaultValue || null, props.onChange);\n\n  let v = (value || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let dateValue = value != null ? value.toDate(defaultTimeZone ?? 'UTC') : null;\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  let shouldCloseOnSelect = props.shouldCloseOnSelect ?? true;\n\n  let [selectedDate, setSelectedDate] = useState<DateValue>(null);\n  let [selectedTime, setSelectedTime] = useState<TimeValue>(null);\n\n  if (value) {\n    selectedDate = value;\n    if ('hour' in value) {\n      selectedTime = value;\n    }\n  }\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let showEra = value?.calendar.identifier === 'gregory' && value.era === 'BC';\n  let formatOpts = useMemo(() => ({\n    granularity,\n    timeZone: defaultTimeZone,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    showEra\n  }), [granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, props.hideTimeZone, showEra]);\n\n  let {minValue, maxValue, isDateUnavailable} = props;\n  let builtinValidation = useMemo(() => getValidationResult(\n    value,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    formatOpts\n  ), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n\n  let validation = useFormValidationState({\n    ...props,\n    value,\n    builtinValidation\n  });\n\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState: ValidationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n\n  let commitValue = (date: DateValue, time: TimeValue) => {\n    setValue('timeZone' in time ? time.set(toCalendarDate(date)) : toCalendarDateTime(date, time));\n    setSelectedDate(null);\n    setSelectedTime(null);\n    validation.commitValidation();\n  };\n\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let selectDate = (newValue: CalendarDate) => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (selectedTime || shouldClose) {\n        commitValue(newValue, selectedTime || getPlaceholderTime(props.placeholderValue));\n      } else {\n        setSelectedDate(newValue);\n      }\n    } else {\n      setValue(newValue);\n      validation.commitValidation();\n    }\n\n    if (shouldClose) {\n      overlayState.setOpen(false);\n    }\n  };\n\n  let selectTime = (newValue: TimeValue) => {\n    if (selectedDate && newValue) {\n      commitValue(selectedDate, newValue);\n    } else {\n      setSelectedTime(newValue);\n    }\n  };\n\n  return {\n    ...validation,\n    value,\n    setValue,\n    dateValue: selectedDate,\n    timeValue: selectedTime,\n    setDateValue: selectDate,\n    setTimeValue: selectTime,\n    granularity,\n    hasTime,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time was set and not the date, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !value && selectedDate && hasTime) {\n        commitValue(selectedDate, selectedTime || getPlaceholderTime(props.placeholderValue));\n      }\n\n      overlayState.setOpen(isOpen);\n    },\n    validationState,\n    isInvalid: isValueInvalid,\n    formatValue(locale, fieldOptions) {\n      if (!dateValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, formatOpts);\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, DateFormatter, now, Time, toCalendar, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DatePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\n// @ts-ignore\nimport i18nMessages from '../intl/*.json';\nimport {LocalizedStringDictionary, LocalizedStringFormatter} from '@internationalized/string';\nimport {mergeValidation, VALID_VALIDITY_STATE} from '@react-stately/form';\nimport {RangeValue, ValidationResult} from '@react-types/shared';\nimport {useState} from 'react';\n\nconst dictionary = new LocalizedStringDictionary(i18nMessages);\n\nfunction getLocale() {\n  // Match browser language setting here, NOT react-aria's I18nProvider, so that we match other browser-provided\n  // validation messages, which to not respect our provider's language.\n  // @ts-ignore\n  return (typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage)) || 'en-US';\n}\n\nexport function getValidationResult(\n  value: DateValue,\n  minValue: DateValue,\n  maxValue: DateValue,\n  isDateUnavailable: (v: DateValue) => boolean,\n  options: FormatterOptions\n): ValidationResult {\n  let rangeOverflow = value != null && maxValue != null && value.compare(maxValue) > 0;\n  let rangeUnderflow = value != null && minValue != null && value.compare(minValue) < 0;\n  let isUnavailable = (value != null && isDateUnavailable?.(value)) || false;\n  let isInvalid = rangeOverflow || rangeUnderflow || isUnavailable;\n  let errors = [];\n\n  if (isInvalid) {\n    let locale = getLocale();\n    let strings = LocalizedStringDictionary.getGlobalDictionaryForPackage('@react-stately/datepicker') || dictionary;\n    let formatter = new LocalizedStringFormatter(locale, strings);\n    let dateFormatter = new DateFormatter(locale, getFormatOptions({}, options));\n    let timeZone = dateFormatter.resolvedOptions().timeZone;\n\n    if (rangeUnderflow) {\n      errors.push(formatter.format('rangeUnderflow', {minValue: dateFormatter.format(minValue.toDate(timeZone))}));\n    }\n\n    if (rangeOverflow) {\n      errors.push(formatter.format('rangeOverflow', {maxValue: dateFormatter.format(maxValue.toDate(timeZone))}));\n    }\n\n    if (isUnavailable) {\n      errors.push(formatter.format('unavailableDate'));\n    }\n  }\n\n  return {\n    isInvalid,\n    validationErrors: errors,\n    validationDetails: {\n      badInput: isUnavailable,\n      customError: false,\n      patternMismatch: false,\n      rangeOverflow,\n      rangeUnderflow,\n      stepMismatch: false,\n      tooLong: false,\n      tooShort: false,\n      typeMismatch: false,\n      valueMissing: false,\n      valid: !isInvalid\n    }\n  };\n}\n\nexport function getRangeValidationResult(\n  value: RangeValue<DateValue>,\n  minValue: DateValue,\n  maxValue: DateValue,\n  isDateUnavailable: (v: DateValue) => boolean,\n  options: FormatterOptions\n) {\n  let startValidation = getValidationResult(\n    value?.start,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    options\n  );\n\n  let endValidation = getValidationResult(\n    value?.end,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    options\n  );\n\n  let result = mergeValidation(startValidation, endValidation);\n  if (value.end != null && value.start != null && value.end.compare(value.start) < 0) {\n    result = mergeValidation(result, {\n      isInvalid: true,\n      validationErrors: [dictionary.getStringForLocale('rangeReversed', getLocale())],\n      validationDetails: {\n        ...VALID_VALIDITY_STATE,\n        rangeUnderflow: true,\n        rangeOverflow: true,\n        valid: false\n      }\n    });\n  }\n\n  return result;\n}\n\nexport type FieldOptions = Pick<Intl.DateTimeFormatOptions, 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second'>;\ninterface FormatterOptions {\n  timeZone?: string,\n  hideTimeZone?: boolean,\n  granularity?: DatePickerProps<any>['granularity'],\n  maxGranularity?: 'year' | 'month' | DatePickerProps<any>['granularity'],\n  hourCycle?: 12 | 24,\n  showEra?: boolean,\n  shouldForceLeadingZeros?: boolean\n}\n\nconst DEFAULT_FIELD_OPTIONS: FieldOptions = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nconst TWO_DIGIT_FIELD_OPTIONS: FieldOptions = {\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nexport function getFormatOptions(\n  fieldOptions: FieldOptions,\n  options: FormatterOptions\n): Intl.DateTimeFormatOptions {\n  let defaultFieldOptions = options.shouldForceLeadingZeros ? TWO_DIGIT_FIELD_OPTIONS : DEFAULT_FIELD_OPTIONS;\n  fieldOptions = {...defaultFieldOptions, ...fieldOptions};\n  let granularity = options.granularity || 'minute';\n  let keys = Object.keys(fieldOptions);\n  let startIdx = keys.indexOf(options.maxGranularity ?? 'year');\n  if (startIdx < 0) {\n    startIdx = 0;\n  }\n\n  let endIdx = keys.indexOf(granularity);\n  if (endIdx < 0) {\n    endIdx = 2;\n  }\n\n  if (startIdx > endIdx) {\n    throw new Error('maxGranularity must be greater than granularity');\n  }\n\n  let opts: Intl.DateTimeFormatOptions = keys.slice(startIdx, endIdx + 1).reduce((opts, key) => {\n    opts[key] = fieldOptions[key];\n    return opts;\n  }, {});\n\n  if (options.hourCycle != null) {\n    opts.hour12 = options.hourCycle === 12;\n  }\n\n  opts.timeZone = options.timeZone || 'UTC';\n\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  if (hasTime && options.timeZone && !options.hideTimeZone) {\n    opts.timeZoneName = 'short';\n  }\n\n  if (options.showEra && startIdx === 0) {\n    opts.era = 'short';\n  }\n\n  return opts;\n}\n\nexport function getPlaceholderTime(placeholderValue: DateValue): TimeValue {\n  if (placeholderValue && 'hour' in placeholderValue) {\n    return placeholderValue;\n  }\n\n  return new Time();\n}\n\nexport function convertValue(value: DateValue, calendar: Calendar): DateValue {\n  if (value === null) {\n    return null;\n  }\n\n  if (!value) {\n    return undefined;\n  }\n\n  return toCalendar(value, calendar);\n}\n\n\nexport function createPlaceholderDate(placeholderValue: DateValue, granularity: string, calendar: Calendar, timeZone: string) {\n  if (placeholderValue) {\n    return convertValue(placeholderValue, calendar);\n  }\n\n  let date = toCalendar(now(timeZone).set({\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  }), calendar);\n\n  if (granularity === 'year' || granularity === 'month' || granularity === 'day') {\n    return toCalendarDate(date);\n  }\n\n  if (!timeZone) {\n    return toCalendarDateTime(date);\n  }\n\n  return date;\n}\n\nexport function useDefaultProps(v: DateValue, granularity: Granularity): [Granularity, string] {\n  // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.\n  let defaultTimeZone = (v && 'timeZone' in v ? v.timeZone : undefined);\n  let defaultGranularity: Granularity = (v && 'minute' in v ? 'minute' : 'day');\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && granularity && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let [lastValue, setLastValue] = useState<[Granularity, string]>([defaultGranularity, defaultTimeZone]);\n\n  // If the granularity or time zone changed, update the last value.\n  if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone)) {\n    setLastValue([defaultGranularity, defaultTimeZone]);\n  }\n\n  if (!granularity) {\n    granularity = v ? defaultGranularity : lastValue[0];\n  }\n\n  let timeZone = v ? defaultTimeZone : lastValue[1];\n  return [granularity, timeZone];\n}\n","const _temp0 = require(\"../intl/ar-AE.json\");\nconst _temp1 = require(\"../intl/bg-BG.json\");\nconst _temp2 = require(\"../intl/cs-CZ.json\");\nconst _temp3 = require(\"../intl/da-DK.json\");\nconst _temp4 = require(\"../intl/de-DE.json\");\nconst _temp5 = require(\"../intl/el-GR.json\");\nconst _temp6 = require(\"../intl/en-US.json\");\nconst _temp7 = require(\"../intl/es-ES.json\");\nconst _temp8 = require(\"../intl/et-EE.json\");\nconst _temp9 = require(\"../intl/fi-FI.json\");\nconst _temp10 = require(\"../intl/fr-FR.json\");\nconst _temp11 = require(\"../intl/he-IL.json\");\nconst _temp12 = require(\"../intl/hr-HR.json\");\nconst _temp13 = require(\"../intl/hu-HU.json\");\nconst _temp14 = require(\"../intl/it-IT.json\");\nconst _temp15 = require(\"../intl/ja-JP.json\");\nconst _temp16 = require(\"../intl/ko-KR.json\");\nconst _temp17 = require(\"../intl/lt-LT.json\");\nconst _temp18 = require(\"../intl/lv-LV.json\");\nconst _temp19 = require(\"../intl/nb-NO.json\");\nconst _temp20 = require(\"../intl/nl-NL.json\");\nconst _temp21 = require(\"../intl/pl-PL.json\");\nconst _temp22 = require(\"../intl/pt-BR.json\");\nconst _temp23 = require(\"../intl/pt-PT.json\");\nconst _temp24 = require(\"../intl/ro-RO.json\");\nconst _temp25 = require(\"../intl/ru-RU.json\");\nconst _temp26 = require(\"../intl/sk-SK.json\");\nconst _temp27 = require(\"../intl/sl-SI.json\");\nconst _temp28 = require(\"../intl/sr-SP.json\");\nconst _temp29 = require(\"../intl/sv-SE.json\");\nconst _temp30 = require(\"../intl/tr-TR.json\");\nconst _temp31 = require(\"../intl/uk-UA.json\");\nconst _temp32 = require(\"../intl/zh-CN.json\");\nconst _temp33 = require(\"../intl/zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, DateFormatter, getMinimumDayInMonth, getMinimumMonthInYear, GregorianCalendar, toCalendar} from '@internationalized/date';\nimport {convertValue, createPlaceholderDate, FieldOptions, getFormatOptions, getValidationResult, useDefaultProps} from './utils';\nimport {DatePickerProps, DateValue, Granularity} from '@react-types/datepicker';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {getPlaceholder} from './placeholders';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport type SegmentType = 'era' | 'year' | 'month' | 'day' |  'hour' | 'minute' | 'second' | 'dayPeriod' | 'literal' | 'timeZoneName';\nexport interface DateSegment {\n  /** The type of segment. */\n  type: SegmentType,\n  /** The formatted text for the segment. */\n  text: string,\n  /** The numeric value for the segment, if applicable. */\n  value?: number,\n  /** The minimum numeric value for the segment, if applicable. */\n  minValue?: number,\n  /** The maximum numeric value for the segment, if applicable. */\n  maxValue?: number,\n  /** Whether the value is a placeholder. */\n  isPlaceholder: boolean,\n  /** A placeholder string for the segment. */\n  placeholder: string,\n  /** Whether the segment is editable. */\n  isEditable: boolean\n}\n\nexport interface DateFieldState extends FormValidationState {\n  /** The current field value. */\n  value: DateValue,\n  /** The current value, converted to a native JavaScript `Date` object.  */\n  dateValue: Date,\n  /** The calendar system currently in use. */\n  calendar: Calendar,\n  /** Sets the field's value. */\n  setValue(value: DateValue): void,\n  /** A list of segments for the current value. */\n  segments: DateSegment[],\n  /** A date formatter configured for the current locale and format. */\n  dateFormatter: DateFormatter,\n  /**\n   * The current validation state of the date field, based on the `validationState`, `minValue`, and `maxValue` props.\n   * @deprecated Use `isInvalid` instead.\n   */\n  validationState: ValidationState,\n  /** Whether the date field is invalid, based on the `isInvalid`, `minValue`, and `maxValue` props. */\n  isInvalid: boolean,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** The maximum date or time unit that is displayed in the field. */\n  maxGranularity: 'year' | 'month' | Granularity,\n  /** Whether the field is disabled. */\n  isDisabled: boolean,\n  /** Whether the field is read only. */\n  isReadOnly: boolean,\n  /** Whether the field is required. */\n  isRequired: boolean,\n  /** Increments the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  increment(type: SegmentType): void,\n  /** Decrements the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  decrement(type: SegmentType): void,\n  /**\n   * Increments the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to increment by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  incrementPage(type: SegmentType): void,\n  /**\n   * Decrements the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to decrement by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  decrementPage(type: SegmentType): void,\n  /** Sets the value of the given segment. */\n  setSegment(type: 'era', value: string): void,\n  setSegment(type: SegmentType, value: number): void,\n  /** Updates the remaining unfilled segments with the placeholder value. */\n  confirmPlaceholder(): void,\n  /** Clears the value of the given segment, reverting it to the placeholder. */\n  clearSegment(type: SegmentType): void,\n  /** Formats the current date value using the given options. */\n  formatValue(fieldOptions: FieldOptions): string\n}\n\nconst EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\n\nconst PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n\n// Node seems to convert everything to lowercase...\nconst TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\n\nexport interface DateFieldStateOptions<T extends DateValue = DateValue> extends DatePickerProps<T> {\n  /**\n   * The maximum unit to display in the date field.\n   * @default 'year'\n   */\n  maxGranularity?: 'year' | 'month' | Granularity,\n  /** The locale to display and edit the value according to. */\n  locale: string,\n  /**\n   * A function that creates a [Calendar](../internationalized/date/Calendar.html)\n   * object for a given calendar identifier. Such a function may be imported from the\n   * `@internationalized/date` package, or manually implemented to include support for\n   * only certain calendars.\n   */\n  createCalendar: (name: string) => Calendar\n}\n\n/**\n * Provides state management for a date field component.\n * A date field allows users to enter and edit date and time values using a keyboard.\n * Each part of a date value is displayed in an individually editable segment.\n */\nexport function useDateFieldState<T extends DateValue = DateValue>(props: DateFieldStateOptions<T>): DateFieldState {\n  let {\n    locale,\n    createCalendar,\n    hideTimeZone,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    minValue,\n    maxValue,\n    isDateUnavailable\n  } = props;\n\n  let v: DateValue = (props.value || props.defaultValue || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC';\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let defaultFormatter = useMemo(() => new DateFormatter(locale), [locale]);\n  let calendar = useMemo(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n\n  let [value, setDate] = useControlledState<DateValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let calendarValue = useMemo(() => convertValue(value, calendar), [value, calendar]);\n\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = useState(\n    () => createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n  );\n\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n  let formatOpts = useMemo(() => ({\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    timeZone: defaultTimeZone,\n    hideTimeZone,\n    hourCycle: props.hourCycle,\n    showEra,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros\n  }), [props.maxGranularity, granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = useMemo(() => getFormatOptions({}, formatOpts), [formatOpts]);\n\n  let dateFormatter = useMemo(() => new DateFormatter(locale, opts), [locale, opts]);\n  let resolvedOptions = useMemo(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments: Partial<typeof EDITABLE_SEGMENTS> = useMemo(() =>\n    dateFormatter.formatToParts(new Date())\n      .filter(seg => EDITABLE_SEGMENTS[seg.type])\n      .reduce((p, seg) => (p[seg.type] = true, p), {})\n  , [dateFormatter]);\n\n  let [validSegments, setValidSegments] = useState<Partial<typeof EDITABLE_SEGMENTS>>(\n    () => props.value || props.defaultValue ? {...allSegments} : {}\n  );\n\n  let clearedSegment = useRef<string>();\n\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = useRef(calendar.identifier);\n  useEffect(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder =>\n        Object.keys(validSegments).length > 0\n          ? toCalendar(placeholder, calendar)\n          : createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n      );\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {...allSegments};\n    setValidSegments(validSegments);\n  }\n\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = (newValue: DateValue) => {\n    if (props.isDisabled || props.isReadOnly) {\n      return;\n    }\n    let validKeys = Object.keys(validSegments);\n    let allKeys = Object.keys(allSegments);\n\n    // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n    if (newValue == null) {\n      setDate(null);\n      setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n      setValidSegments({});\n    } else if (validKeys.length >= allKeys.length || (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== 'dayPeriod')) {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = toCalendar(newValue, v?.calendar || new GregorianCalendar());\n      setDate(newValue);\n    } else {\n      setPlaceholderDate(newValue);\n    }\n    clearedSegment.current = null;\n  };\n\n  let dateValue = useMemo(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = useMemo(() =>\n    dateFormatter.formatToParts(dateValue)\n      .map(segment => {\n        let isEditable = EDITABLE_SEGMENTS[segment.type];\n        if (segment.type === 'era' && calendar.getEras().length === 1) {\n          isEditable = false;\n        }\n\n        let isPlaceholder = EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n        let placeholder = EDITABLE_SEGMENTS[segment.type] ? getPlaceholder(segment.type, segment.value, locale) : null;\n        return {\n          type: TYPE_MAPPING[segment.type] || segment.type,\n          text: isPlaceholder ? placeholder : segment.value,\n          ...getSegmentLimits(displayValue, segment.type, resolvedOptions),\n          isPlaceholder,\n          placeholder,\n          isEditable\n        } as DateSegment;\n      })\n  , [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({...validSegments});\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({...validSegments});\n  }\n\n  let markValid = (part: Intl.DateTimeFormatPartTypes) => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) {\n      validSegments.era = true;\n    }\n    setValidSegments({...validSegments});\n  };\n\n  let adjustSegment = (type: Intl.DateTimeFormatPartTypes, amount: number) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length >= allKeys.length || (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod)) {\n        setValue(displayValue);\n      }\n    } else {\n      setValue(addSegment(displayValue, type, amount, resolvedOptions));\n    }\n  };\n\n  let builtinValidation = useMemo(() => getValidationResult(\n    value,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    formatOpts\n  ), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n\n  let validation = useFormValidationState({\n    ...props,\n    value,\n    builtinValidation\n  });\n\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState: ValidationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n\n  return {\n    ...validation,\n    value: calendarValue,\n    dateValue,\n    calendar,\n    setValue,\n    segments,\n    dateFormatter,\n    validationState,\n    isInvalid: isValueInvalid,\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -(PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue(setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) {\n        return;\n      }\n\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {...allSegments};\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      clearedSegment.current = part;\n      setValidSegments({...validSegments});\n\n      let placeholder = createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n\n      // Reset day period to default without changing the hour.\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour - 12});\n        } else if (!isPM && shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour + 12});\n        }\n      } else if (part in displayValue) {\n        value = displayValue.set({[part]: placeholder[part]});\n      }\n\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions: FieldOptions) {\n      if (!calendarValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, formatOpts);\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n\nfunction getSegmentLimits(date: DateValue, type: string, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (type) {\n    case 'era': {\n      let eras = date.calendar.getEras();\n      return {\n        value: eras.indexOf(date.era),\n        minValue: 0,\n        maxValue: eras.length - 1\n      };\n    }\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case 'month':\n      return {\n        value: date.month,\n        minValue: getMinimumMonthInYear(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case 'day':\n      return {\n        value: date.day,\n        minValue: getMinimumDayInMonth(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n\n  if ('hour' in date) {\n    switch (type) {\n      case 'dayPeriod':\n        return {\n          value: date.hour >= 12 ? 12 : 0,\n          minValue: 0,\n          maxValue: 12\n        };\n      case 'hour':\n        if (options.hour12) {\n          let isPM = date.hour >= 12;\n          return {\n            value: date.hour,\n            minValue: isPM ? 12 : 0,\n            maxValue: isPM ? 23 : 11\n          };\n        }\n\n        return {\n          value: date.hour,\n          minValue: 0,\n          maxValue: 23\n        };\n      case 'minute':\n        return {\n          value: date.minute,\n          minValue: 0,\n          maxValue: 59\n        };\n      case 'second':\n        return {\n          value: date.second,\n          minValue: 0,\n          maxValue: 59\n        };\n    }\n  }\n\n  return {};\n}\n\nfunction addSegment(value: DateValue, part: string, amount: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {round: part === 'year'});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({hour: isPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return value.cycle(part, amount, {\n          round: part !== 'hour',\n          hourCycle: options.hour12 ? 12 : 24\n        });\n    }\n  }\n}\n\nfunction setSegment(value: DateValue, part: string, segmentValue: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({[part]: segmentValue});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) {\n          return value;\n        }\n        return value.set({hour: wasPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n        // In 12 hour time, ensure that AM/PM does not change\n        if (options.hour12) {\n          let hours = value.hour;\n          let wasPM = hours >= 12;\n          if (!wasPM && segmentValue === 12) {\n            segmentValue = 0;\n          }\n          if (wasPM && segmentValue < 12) {\n            segmentValue += 12;\n          }\n        }\n        // fallthrough\n      case 'minute':\n      case 'second':\n        return value.set({[part]: segmentValue});\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {LocalizedStringDictionary} from '@internationalized/string';\n\n// These placeholders are based on the strings used by the <input type=\"date\">\n// implementations in Chrome and Firefox. Additional languages are supported\n// here than React Spectrum's typical translations.\nconst placeholders = new LocalizedStringDictionary({\n  ach: {year: 'mwaka', month: 'dwe', day: 'nino'},\n  af: {year: 'jjjj', month: 'mm', day: 'dd'},\n  am: {year: 'ዓዓዓዓ', month: 'ሚሜ', day: 'ቀቀ'},\n  an: {year: 'aaaa', month: 'mm', day: 'dd'},\n  ar: {year: 'سنة', month: 'شهر', day: 'يوم'},\n  ast: {year: 'aaaa', month: 'mm', day: 'dd'},\n  az: {year: 'iiii', month: 'aa', day: 'gg'},\n  be: {year: 'гггг', month: 'мм', day: 'дд'},\n  bg: {year: 'гггг', month: 'мм', day: 'дд'},\n  bn: {year: 'yyyy', month: 'মিমি', day: 'dd'},\n  br: {year: 'bbbb', month: 'mm', day: 'dd'},\n  bs: {year: 'gggg', month: 'mm', day: 'dd'},\n  ca: {year: 'aaaa', month: 'mm', day: 'dd'},\n  cak: {year: 'jjjj', month: 'ii', day: \"q'q'\"},\n  ckb: {year: 'ساڵ', month: 'مانگ', day: 'ڕۆژ'},\n  cs: {year: 'rrrr', month: 'mm', day: 'dd'},\n  cy: {year: 'bbbb', month: 'mm', day: 'dd'},\n  da: {year: 'åååå', month: 'mm', day: 'dd'},\n  de: {year: 'jjjj', month: 'mm', day: 'tt'},\n  dsb: {year: 'llll', month: 'mm', day: 'źź'},\n  el: {year: 'εεεε', month: 'μμ', day: 'ηη'},\n  en: {year: 'yyyy', month: 'mm', day: 'dd'},\n  eo: {year: 'jjjj', month: 'mm', day: 'tt'},\n  es: {year: 'aaaa', month: 'mm', day: 'dd'},\n  et: {year: 'aaaa', month: 'kk', day: 'pp'},\n  eu: {year: 'uuuu', month: 'hh', day: 'ee'},\n  fa: {year: 'سال', month: 'ماه', day: 'روز'},\n  ff: {year: 'hhhh', month: 'll', day: 'ññ'},\n  fi: {year: 'vvvv', month: 'kk', day: 'pp'},\n  fr: {year: 'aaaa', month: 'mm', day: 'jj'},\n  fy: {year: 'jjjj', month: 'mm', day: 'dd'},\n  ga: {year: 'bbbb', month: 'mm', day: 'll'},\n  gd: {year: 'bbbb', month: 'mm', day: 'll'},\n  gl: {year: 'aaaa', month: 'mm', day: 'dd'},\n  he: {year: 'שנה', month: 'חודש', day: 'יום'},\n  hr: {year: 'gggg', month: 'mm', day: 'dd'},\n  hsb: {year: 'llll', month: 'mm', day: 'dd'},\n  hu: {year: 'éééé', month: 'hh', day: 'nn'},\n  ia: {year: 'aaaa', month: 'mm', day: 'dd'},\n  id: {year: 'tttt', month: 'bb', day: 'hh'},\n  it: {year: 'aaaa', month: 'mm', day: 'gg'},\n  ja: {year: ' 年 ', month: '月', day: '日'},\n  ka: {year: 'წწწწ', month: 'თთ', day: 'რრ'},\n  kk: {year: 'жжжж', month: 'аа', day: 'кк'},\n  kn: {year: 'ವವವವ', month: 'ಮಿಮೀ', day: 'ದಿದಿ'},\n  ko: {year: '연도', month: '월', day: '일'},\n  lb: {year: 'jjjj', month: 'mm', day: 'dd'},\n  lo: {year: 'ປປປປ', month: 'ດດ', day: 'ວວ'},\n  lt: {year: 'mmmm', month: 'mm', day: 'dd'},\n  lv: {year: 'gggg', month: 'mm', day: 'dd'},\n  meh: {year: 'aaaa', month: 'mm', day: 'dd'},\n  ml: {year: 'വർഷം', month: 'മാസം', day: 'തീയതി'},\n  ms: {year: 'tttt', month: 'mm', day: 'hh'},\n  nl: {year: 'jjjj', month: 'mm', day: 'dd'},\n  nn: {year: 'åååå', month: 'mm', day: 'dd'},\n  no: {year: 'åååå', month: 'mm', day: 'dd'},\n  oc: {year: 'aaaa', month: 'mm', day: 'jj'},\n  pl: {year: 'rrrr', month: 'mm', day: 'dd'},\n  pt: {year: 'aaaa', month: 'mm', day: 'dd'},\n  rm: {year: 'oooo', month: 'mm', day: 'dd'},\n  ro: {year: 'aaaa', month: 'll', day: 'zz'},\n  ru: {year: 'гггг', month: 'мм', day: 'дд'},\n  sc: {year: 'aaaa', month: 'mm', day: 'dd'},\n  scn: {year: 'aaaa', month: 'mm', day: 'jj'},\n  sk: {year: 'rrrr', month: 'mm', day: 'dd'},\n  sl: {year: 'llll', month: 'mm', day: 'dd'},\n  sr: {year: 'гггг', month: 'мм', day: 'дд'},\n  sv: {year: 'åååå', month: 'mm', day: 'dd'},\n  szl: {year: 'rrrr', month: 'mm', day: 'dd'},\n  tg: {year: 'сссс', month: 'мм', day: 'рр'},\n  th: {year: 'ปปปป', month: 'ดด', day: 'วว'},\n  tr: {year: 'yyyy', month: 'aa', day: 'gg'},\n  uk: {year: 'рррр', month: 'мм', day: 'дд'},\n  'zh-CN': {year: '年', month: '月', day: '日'},\n  'zh-TW': {year: '年', month: '月', day: '日'}\n}, 'en');\n\nexport function getPlaceholder(field: string, value: string, locale: string) {\n  // Use the actual placeholder value for the era and day period fields.\n  if (field === 'era' || field === 'dayPeriod') {\n    return value;\n  }\n\n  if (field === 'year' || field === 'month' || field === 'day') {\n    return placeholders.getStringForLocale(field, locale);\n  }\n\n  // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.\n  return '––';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DateFormatter, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DateRange, DateRangePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {FieldOptions, getFormatOptions, getPlaceholderTime, getRangeValidationResult, useDefaultProps} from './utils';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {RangeValue, ValidationState} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface DateRangePickerStateOptions<T extends DateValue = DateValue> extends DateRangePickerProps<T> {\n  /**\n   * Determines whether the date picker popover should close automatically when a date is selected.\n   * @default true\n   */\n  shouldCloseOnSelect?: boolean | (() => boolean)\n}\n\ntype TimeRange = RangeValue<TimeValue>;\nexport interface DateRangePickerState extends OverlayTriggerState, FormValidationState {\n  /** The currently selected date range. */\n  value: DateRange | null,\n  /** Sets the selected date range. */\n  setValue(value: DateRange | null): void,\n  /**\n   * The date portion of the selected range. This may be set prior to `value` if the user has\n   * selected a date range but has not yet selected a time range.\n   */\n  dateRange: DateRange | null,\n  /** Sets the date portion of the selected range. */\n  setDateRange(value: DateRange): void,\n  /**\n   * The time portion of the selected range. This may be set prior to `value` if the user has\n   * selected a time range but has not yet selected a date range.\n   */\n  timeRange: TimeRange | null,\n  /** Sets the time portion of the selected range. */\n  setTimeRange(value: TimeRange): void,\n  /** Sets the date portion of either the start or end of the selected range. */\n  setDate(part: 'start' | 'end', value: DateValue): void,\n  /** Sets the time portion of either the start or end of the selected range. */\n  setTime(part: 'start' | 'end', value: TimeValue): void,\n  /** Sets the date and time of either the start or end of the selected range. */\n  setDateTime(part: 'start' | 'end', value: DateValue): void,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** Whether the date range picker supports selecting times, according to the `granularity` prop and current value. */\n  hasTime: boolean,\n  /** Whether the calendar popover is currently open. */\n  isOpen: boolean,\n  /** Sets whether the calendar popover is open. */\n  setOpen(isOpen: boolean): void,\n  /**\n   * The current validation state of the date range picker, based on the `validationState`, `minValue`, and `maxValue` props.\n   * @deprecated Use `isInvalid` instead.\n   */\n  validationState: ValidationState,\n  /** Whether the date range picker is invalid, based on the `isInvalid`, `minValue`, and `maxValue` props. */\n  isInvalid: boolean,\n  /** Formats the selected range using the given options. */\n  formatValue(locale: string, fieldOptions: FieldOptions): {start: string, end: string}\n}\n\n/**\n * Provides state management for a date range picker component.\n * A date range picker combines two DateFields and a RangeCalendar popover to allow\n * users to enter or select a date and time range.\n */\nexport function useDateRangePickerState<T extends DateValue = DateValue>(props: DateRangePickerStateOptions<T>): DateRangePickerState {\n  let overlayState = useOverlayTriggerState(props);\n  let [controlledValue, setControlledValue] = useControlledState<DateRange>(props.value, props.defaultValue || null, props.onChange);\n  let [placeholderValue, setPlaceholderValue] = useState(() => controlledValue || {start: null, end: null});\n\n  // Reset the placeholder if the value prop is set to null.\n  if (controlledValue == null && placeholderValue.start && placeholderValue.end) {\n    placeholderValue = {start: null, end: null};\n    setPlaceholderValue(placeholderValue);\n  }\n\n  let value = controlledValue || placeholderValue;\n\n  let setValue = (value: DateRange) => {\n    setPlaceholderValue(value || {start: null, end: null});\n    if (value?.start && value.end) {\n      setControlledValue(value);\n    } else {\n      setControlledValue(null);\n    }\n  };\n\n  let v = (value?.start || value?.end || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  let shouldCloseOnSelect = props.shouldCloseOnSelect ?? true;\n\n  let [dateRange, setSelectedDateRange] = useState<DateRange>(null);\n  let [timeRange, setSelectedTimeRange] = useState<TimeRange>(null);\n\n  if (value && value.start && value.end) {\n    dateRange = value;\n    if ('hour' in value.start) {\n      timeRange = value as TimeRange;\n    }\n  }\n\n  let commitValue = (dateRange: DateRange, timeRange: TimeRange) => {\n    setValue({\n      start: 'timeZone' in timeRange.start ? timeRange.start.set(toCalendarDate(dateRange.start)) : toCalendarDateTime(dateRange.start, timeRange.start),\n      end: 'timeZone' in timeRange.end ? timeRange.end.set(toCalendarDate(dateRange.end)) : toCalendarDateTime(dateRange.end, timeRange.end)\n    });\n    setSelectedDateRange(null);\n    setSelectedTimeRange(null);\n    validation.commitValidation();\n  };\n\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let setDateRange = (range: DateRange) => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (shouldClose || (range.start && range.end && timeRange?.start && timeRange?.end)) {\n        commitValue(range, {\n          start: timeRange?.start || getPlaceholderTime(props.placeholderValue),\n          end: timeRange?.end || getPlaceholderTime(props.placeholderValue)\n        });\n      } else {\n        setSelectedDateRange(range);\n      }\n    } else if (range.start && range.end) {\n      setValue(range);\n      validation.commitValidation();\n    } else {\n      setSelectedDateRange(range);\n    }\n\n    if (shouldClose) {\n      overlayState.setOpen(false);\n    }\n  };\n\n  let setTimeRange = (range: TimeRange) => {\n    if (dateRange?.start && dateRange?.end && range.start && range.end) {\n      commitValue(dateRange, range);\n    } else {\n      setSelectedTimeRange(range);\n    }\n  };\n\n  let showEra = (value?.start?.calendar.identifier === 'gregory' && value.start.era === 'BC') || (value?.end?.calendar.identifier === 'gregory' && value.end.era === 'BC');\n  let formatOpts = useMemo(() => ({\n    granularity,\n    timeZone: defaultTimeZone,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    showEra\n  }), [granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, props.hideTimeZone, showEra]);\n\n  let {minValue, maxValue, isDateUnavailable} = props;\n  let builtinValidation = useMemo(() => getRangeValidationResult(\n    value,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    formatOpts\n  ), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n\n  let validation = useFormValidationState({\n    ...props,\n    value: controlledValue,\n    name: useMemo(() => [props.startName, props.endName], [props.startName, props.endName]),\n    builtinValidation\n  });\n\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState: ValidationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n\n  return {\n    ...validation,\n    value,\n    setValue,\n    dateRange,\n    timeRange,\n    granularity,\n    hasTime,\n    setDate(part, date) {\n      setDateRange({...dateRange, [part]: date});\n    },\n    setTime(part, time) {\n      setTimeRange({...timeRange, [part]: time});\n    },\n    setDateTime(part, dateTime) {\n      setValue({...value, [part]: dateTime});\n    },\n    setDateRange,\n    setTimeRange,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time range was set and not the date range, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !(value?.start && value?.end) && dateRange?.start && dateRange?.end && hasTime) {\n        commitValue(dateRange, {\n          start: timeRange?.start || getPlaceholderTime(props.placeholderValue),\n          end: timeRange?.end || getPlaceholderTime(props.placeholderValue)\n        });\n      }\n\n      overlayState.setOpen(isOpen);\n    },\n    validationState,\n    isInvalid: isValueInvalid,\n    formatValue(locale, fieldOptions) {\n      if (!value || !value.start || !value.end) {\n        return null;\n      }\n\n      let startTimeZone = 'timeZone' in value.start ? value.start.timeZone : undefined;\n      let startGranularity = props.granularity || (value.start && 'minute' in value.start ? 'minute' : 'day');\n      let endTimeZone = 'timeZone' in value.end ? value.end.timeZone : undefined;\n      let endGranularity = props.granularity || (value.end && 'minute' in value.end ? 'minute' : 'day');\n\n      let startOptions = getFormatOptions(fieldOptions, {\n        granularity: startGranularity,\n        timeZone: startTimeZone,\n        hideTimeZone: props.hideTimeZone,\n        hourCycle: props.hourCycle,\n        showEra: (value.start.calendar.identifier === 'gregory' && value.start.era === 'BC') ||\n          (value.end.calendar.identifier === 'gregory' && value.end.era === 'BC')\n      });\n\n      let startDate = value.start.toDate(startTimeZone || 'UTC');\n      let endDate = value.end.toDate(endTimeZone || 'UTC');\n\n      let startFormatter = new DateFormatter(locale, startOptions);\n      let endFormatter: Intl.DateTimeFormat;\n      if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {\n        // Use formatRange, as it results in shorter output when some of the fields\n        // are shared between the start and end dates (e.g. the same month).\n        // Formatting will fail if the end date is before the start date. Fall back below when that happens.\n        try {\n          let parts = startFormatter.formatRangeToParts(startDate, endDate);\n\n          // Find the separator between the start and end date. This is determined\n          // by finding the last shared literal before the end range.\n          let separatorIndex = -1;\n          for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            if (part.source === 'shared' && part.type === 'literal') {\n              separatorIndex = i;\n            } else if (part.source === 'endRange') {\n              break;\n            }\n          }\n\n          // Now we can combine the parts into start and end strings.\n          let start = '';\n          let end = '';\n          for (let i = 0; i < parts.length; i++) {\n            if (i < separatorIndex) {\n              start += parts[i].value;\n            } else if (i > separatorIndex) {\n              end += parts[i].value;\n            }\n          }\n\n          return {start, end};\n        } catch (e) {\n          // ignore\n        }\n\n        endFormatter = startFormatter;\n      } else {\n        let endOptions = getFormatOptions(fieldOptions, {\n          granularity: endGranularity,\n          timeZone: endTimeZone,\n          hideTimeZone: props.hideTimeZone,\n          hourCycle: props.hourCycle\n        });\n\n        endFormatter = new DateFormatter(locale, endOptions);\n      }\n\n      return {\n        start: startFormatter.format(startDate),\n        end: endFormatter.format(endDate)\n      };\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DateFieldState, useDateFieldState} from '.';\nimport {DateValue, TimePickerProps, TimeValue} from '@react-types/datepicker';\nimport {getLocalTimeZone, GregorianCalendar, Time, toCalendarDateTime, today, toTime, toZoned} from '@internationalized/date';\nimport {useCallback, useMemo} from 'react';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TimeFieldStateOptions<T extends TimeValue = TimeValue> extends TimePickerProps<T> {\n  /** The locale to display and edit the value according to. */\n  locale: string\n}\n\nexport interface TimeFieldState extends DateFieldState {\n  /** The current time value. */\n  timeValue: Time\n}\n\n/**\n * Provides state management for a time field component.\n * A time field allows users to enter and edit time values using a keyboard.\n * Each part of a time value is displayed in an individually editable segment.\n */\nexport function useTimeFieldState<T extends TimeValue = TimeValue>(props: TimeFieldStateOptions<T>): TimeFieldState {\n  let {\n    placeholderValue = new Time(),\n    minValue,\n    maxValue,\n    granularity,\n    validate\n  } = props;\n\n  let [value, setValue] = useControlledState<TimeValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let v = value || placeholderValue;\n  let day = v && 'day' in v ? v : undefined;\n  let defaultValueTimeZone = props.defaultValue && 'timeZone' in props.defaultValue ? props.defaultValue.timeZone : undefined;\n  let placeholderDate = useMemo(() => {\n    let valueTimeZone = v && 'timeZone' in v ? v.timeZone : undefined;\n\n    return (valueTimeZone || defaultValueTimeZone) && placeholderValue ? toZoned(convertValue(placeholderValue), valueTimeZone || defaultValueTimeZone) : convertValue(placeholderValue);\n  }, [placeholderValue, v, defaultValueTimeZone]);\n  let minDate = useMemo(() => convertValue(minValue, day), [minValue, day]);\n  let maxDate = useMemo(() => convertValue(maxValue, day), [maxValue, day]);\n\n  let timeValue = useMemo(() => value && 'day' in value ? toTime(value) : value as Time, [value]);\n  let dateTime = useMemo(() => value == null ? null : convertValue(value), [value]);\n  let onChange = newValue => {\n    setValue(day || defaultValueTimeZone ? newValue : newValue && toTime(newValue));\n  };\n\n  let state = useDateFieldState({\n    ...props,\n    value: dateTime,\n    defaultValue: undefined,\n    minValue: minDate,\n    maxValue: maxDate,\n    onChange,\n    granularity: granularity || 'minute',\n    maxGranularity: 'hour',\n    placeholderValue: placeholderDate,\n    // Calendar should not matter for time fields.\n    createCalendar: () => new GregorianCalendar(),\n    validate: useCallback(() => validate?.(value as any), [validate, value])\n  });\n\n  return {\n    ...state,\n    timeValue\n  };\n}\n\nfunction convertValue(value: TimeValue, date: DateValue = today(getLocalTimeZone())) {\n  if (!value) {\n    return null;\n  }\n\n  if ('day' in value) {\n    return value;\n  }\n\n  return toCalendarDateTime(date, value);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
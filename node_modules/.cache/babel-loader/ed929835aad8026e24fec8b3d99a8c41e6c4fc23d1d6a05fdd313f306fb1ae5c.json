{"ast":null,"code":"import $f23889fffbde9058$exports from \"./ar-AE.mjs\";\nimport $09d9badaa8903929$exports from \"./bg-BG.mjs\";\nimport $151b77e0fd711730$exports from \"./cs-CZ.mjs\";\nimport $61915aa8630b90a2$exports from \"./da-DK.mjs\";\nimport $35cea00159787840$exports from \"./de-DE.mjs\";\nimport $518b4e82b9eacafd$exports from \"./el-GR.mjs\";\nimport $1c2b297f7e2cf474$exports from \"./en-US.mjs\";\nimport $07f628a707cf9b18$exports from \"./es-ES.mjs\";\nimport $db553ffe17c7f4db$exports from \"./et-EE.mjs\";\nimport $4afcfe00cd703f83$exports from \"./fi-FI.mjs\";\nimport $1d2645d18d4c5be0$exports from \"./fr-FR.mjs\";\nimport $64cb6a9be1f6fa48$exports from \"./he-IL.mjs\";\nimport $2a1ef2e8050be27a$exports from \"./hr-HR.mjs\";\nimport $ad429dca102acd0e$exports from \"./hu-HU.mjs\";\nimport $6e68cb5d1cb97bd2$exports from \"./it-IT.mjs\";\nimport $a82ee9af063ee069$exports from \"./ja-JP.mjs\";\nimport $67e9091dbf37d4eb$exports from \"./ko-KR.mjs\";\nimport $75834f9729f653d1$exports from \"./lt-LT.mjs\";\nimport $a2df2c2520b4a7f0$exports from \"./lv-LV.mjs\";\nimport $aedcd71db4933ed5$exports from \"./nb-NO.mjs\";\nimport $3b2df9e54353046c$exports from \"./nl-NL.mjs\";\nimport $c03fe977fcfafe93$exports from \"./pl-PL.mjs\";\nimport $569f006fc292345f$exports from \"./pt-BR.mjs\";\nimport $7c2494e14452f2dd$exports from \"./pt-PT.mjs\";\nimport $eb82ef981b5592bf$exports from \"./ro-RO.mjs\";\nimport $6efa0e119f396950$exports from \"./ru-RU.mjs\";\nimport $7f5e57085d7f5049$exports from \"./sk-SK.mjs\";\nimport $578ee7c11dcdde7a$exports from \"./sl-SI.mjs\";\nimport $bbc3fd6cd0bc9d50$exports from \"./sr-SP.mjs\";\nimport $0b04512118591d2a$exports from \"./sv-SE.mjs\";\nimport $3a49d121fe4c9e1d$exports from \"./tr-TR.mjs\";\nimport $5ba21dbb8914919d$exports from \"./uk-UA.mjs\";\nimport $51078838e1b16cd7$exports from \"./zh-CN.mjs\";\nimport $33fab8219207655a$exports from \"./zh-TW.mjs\";\nimport { createFocusManager as $cIPI0$createFocusManager, getFocusableTreeWalker as $cIPI0$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { useId as $cIPI0$useId, useDescription as $cIPI0$useDescription, filterDOMProps as $cIPI0$filterDOMProps, mergeProps as $cIPI0$mergeProps, useFormReset as $cIPI0$useFormReset, isMac as $cIPI0$isMac, scrollIntoViewport as $cIPI0$scrollIntoViewport, getScrollParent as $cIPI0$getScrollParent, useEvent as $cIPI0$useEvent, useLayoutEffect as $cIPI0$useLayoutEffect, isIOS as $cIPI0$isIOS, useLabels as $cIPI0$useLabels } from \"@react-aria/utils\";\nimport { privateValidationStateProp as $cIPI0$privateValidationStateProp, DEFAULT_VALIDATION_RESULT as $cIPI0$DEFAULT_VALIDATION_RESULT, mergeValidation as $cIPI0$mergeValidation } from \"@react-stately/form\";\nimport $cIPI0$react, { useMemo as $cIPI0$useMemo, useRef as $cIPI0$useRef, useEffect as $cIPI0$useEffect } from \"react\";\nimport { useField as $cIPI0$useField } from \"@react-aria/label\";\nimport { useFocusWithin as $cIPI0$useFocusWithin, usePress as $cIPI0$usePress } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $cIPI0$useLocalizedStringFormatter, useLocale as $cIPI0$useLocale, useDateFormatter as $cIPI0$useDateFormatter, useFilter as $cIPI0$useFilter, useLocalizedStringDictionary as $cIPI0$useLocalizedStringDictionary } from \"@react-aria/i18n\";\nimport { useFormValidation as $cIPI0$useFormValidation } from \"@react-aria/form\";\nimport { toCalendar as $cIPI0$toCalendar, CalendarDate as $cIPI0$CalendarDate } from \"@internationalized/date\";\nimport { NumberParser as $cIPI0$NumberParser } from \"@internationalized/number\";\nimport { useSpinButton as $cIPI0$useSpinButton } from \"@react-aria/spinbutton\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nvar $dfb4eba373ed9493$exports = {};\n$dfb4eba373ed9493$exports = {\n  \"ar-AE\": $f23889fffbde9058$exports,\n  \"bg-BG\": $09d9badaa8903929$exports,\n  \"cs-CZ\": $151b77e0fd711730$exports,\n  \"da-DK\": $61915aa8630b90a2$exports,\n  \"de-DE\": $35cea00159787840$exports,\n  \"el-GR\": $518b4e82b9eacafd$exports,\n  \"en-US\": $1c2b297f7e2cf474$exports,\n  \"es-ES\": $07f628a707cf9b18$exports,\n  \"et-EE\": $db553ffe17c7f4db$exports,\n  \"fi-FI\": $4afcfe00cd703f83$exports,\n  \"fr-FR\": $1d2645d18d4c5be0$exports,\n  \"he-IL\": $64cb6a9be1f6fa48$exports,\n  \"hr-HR\": $2a1ef2e8050be27a$exports,\n  \"hu-HU\": $ad429dca102acd0e$exports,\n  \"it-IT\": $6e68cb5d1cb97bd2$exports,\n  \"ja-JP\": $a82ee9af063ee069$exports,\n  \"ko-KR\": $67e9091dbf37d4eb$exports,\n  \"lt-LT\": $75834f9729f653d1$exports,\n  \"lv-LV\": $a2df2c2520b4a7f0$exports,\n  \"nb-NO\": $aedcd71db4933ed5$exports,\n  \"nl-NL\": $3b2df9e54353046c$exports,\n  \"pl-PL\": $c03fe977fcfafe93$exports,\n  \"pt-BR\": $569f006fc292345f$exports,\n  \"pt-PT\": $7c2494e14452f2dd$exports,\n  \"ro-RO\": $eb82ef981b5592bf$exports,\n  \"ru-RU\": $6efa0e119f396950$exports,\n  \"sk-SK\": $7f5e57085d7f5049$exports,\n  \"sl-SI\": $578ee7c11dcdde7a$exports,\n  \"sr-SP\": $bbc3fd6cd0bc9d50$exports,\n  \"sv-SE\": $0b04512118591d2a$exports,\n  \"tr-TR\": $3a49d121fe4c9e1d$exports,\n  \"uk-UA\": $5ba21dbb8914919d$exports,\n  \"zh-CN\": $51078838e1b16cd7$exports,\n  \"zh-TW\": $33fab8219207655a$exports\n};\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref, disableArrowNavigation) {\n  let {\n    direction: direction\n  } = (0, $cIPI0$useLocale)();\n  let focusManager = (0, $cIPI0$useMemo)(() => (0, $cIPI0$createFocusManager)(ref), [ref]);\n  // Open the popover on alt + arrow down\n  let onKeyDown = e => {\n    if (!e.currentTarget.contains(e.target)) return;\n    if (e.altKey && (e.key === \"ArrowDown\" || e.key === \"ArrowUp\") && \"setOpen\" in state) {\n      e.preventDefault();\n      e.stopPropagation();\n      state.setOpen(true);\n    }\n    if (disableArrowNavigation) return;\n    switch (e.key) {\n      case \"ArrowLeft\":\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === \"rtl\") focusManager.focusNext();else focusManager.focusPrevious();\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === \"rtl\") focusManager.focusPrevious();else focusManager.focusNext();\n        break;\n    }\n  };\n  // Focus the first placeholder segment from the end on mouse down/touch up in the field.\n  let focusLast = () => {\n    var _window_event;\n    // Try to find the segment prior to the element that was clicked on.\n    let target = (_window_event = window.event) === null || _window_event === void 0 ? void 0 : _window_event.target;\n    let walker = (0, $cIPI0$getFocusableTreeWalker)(ref.current, {\n      tabbable: true\n    });\n    if (target) {\n      walker.currentNode = target;\n      target = walker.previousNode();\n    }\n    // If no target found, find the last element from the end.\n    if (!target) {\n      let last;\n      do {\n        last = walker.lastChild();\n        if (last) target = last;\n      } while (last);\n    }\n    // Now go backwards until we find an element that is not a placeholder.\n    while (target === null || target === void 0 ? void 0 : target.hasAttribute(\"data-placeholder\")) {\n      let prev = walker.previousNode();\n      if (prev && prev.hasAttribute(\"data-placeholder\")) target = prev;else break;\n    }\n    if (target) target.focus();\n  };\n  let {\n    pressProps: pressProps\n  } = (0, $cIPI0$usePress)({\n    preventFocusOnPress: true,\n    allowTextSelectionOnPress: true,\n    onPressStart(e) {\n      if (e.pointerType === \"mouse\") focusLast();\n    },\n    onPress(e) {\n      if (e.pointerType !== \"mouse\") focusLast();\n    }\n  });\n  return (0, $cIPI0$mergeProps)(pressProps, {\n    onKeyDown: onKeyDown\n  });\n}\nconst $16f0b7bb276bc17e$export$653eddfc964b0f8a = new WeakMap();\nconst $16f0b7bb276bc17e$export$300019f83c56d282 = \"__role_\" + Date.now();\nconst $16f0b7bb276bc17e$export$7b3062cd49e80452 = \"__focusManager_\" + Date.now();\nfunction $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref) {\n  var _state_value;\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $cIPI0$useField)({\n    ...props,\n    labelElementType: \"span\",\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let valueOnFocus = (0, $cIPI0$useRef)(null);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $cIPI0$useFocusWithin)({\n    ...props,\n    onFocusWithin(e) {\n      var _props_onFocus;\n      valueOnFocus.current = state.value;\n      (_props_onFocus = props.onFocus) === null || _props_onFocus === void 0 ? void 0 : _props_onFocus.call(props, e);\n    },\n    onBlurWithin: e => {\n      var _props_onBlur;\n      state.confirmPlaceholder();\n      if (state.value !== valueOnFocus.current) state.commitValidation();\n      (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);\n    },\n    onFocusWithinChange: props.onFocusChange\n  });\n  let stringFormatter = (0, $cIPI0$useLocalizedStringFormatter)((0, ( /*@__PURE__*/$parcel$interopDefault($dfb4eba373ed9493$exports))), \"@react-aria/datepicker\");\n  let message = state.maxGranularity === \"hour\" ? \"selectedTimeDescription\" : \"selectedDateDescription\";\n  let field = state.maxGranularity === \"hour\" ? \"time\" : \"date\";\n  let description = state.value ? stringFormatter.format(message, {\n    [field]: state.formatValue({\n      month: \"long\"\n    })\n  }) : \"\";\n  let descProps = (0, $cIPI0$useDescription)(description);\n  // If within a date picker or date range picker, the date field will have role=\"presentation\" and an aria-describedby\n  // will be passed in that references the value (e.g. entire range). Otherwise, add the field's value description.\n  let describedBy = props[$16f0b7bb276bc17e$export$300019f83c56d282] === \"presentation\" ? fieldProps[\"aria-describedby\"] : [descProps[\"aria-describedby\"], fieldProps[\"aria-describedby\"]].filter(Boolean).join(\" \") || undefined;\n  let propsFocusManager = props[$16f0b7bb276bc17e$export$7b3062cd49e80452];\n  let focusManager = (0, $cIPI0$useMemo)(() => propsFocusManager || (0, $cIPI0$createFocusManager)(ref), [propsFocusManager, ref]);\n  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref, props[$16f0b7bb276bc17e$export$300019f83c56d282] === \"presentation\");\n  // Pass labels and other information to segments.\n  $16f0b7bb276bc17e$export$653eddfc964b0f8a.set(state, {\n    ariaLabel: props[\"aria-label\"],\n    ariaLabelledBy: [labelProps.id, props[\"aria-labelledby\"]].filter(Boolean).join(\" \") || undefined,\n    ariaDescribedBy: describedBy,\n    focusManager: focusManager\n  });\n  let autoFocusRef = (0, $cIPI0$useRef)(props.autoFocus);\n  // When used within a date picker or date range picker, the field gets role=\"presentation\"\n  // rather than role=\"group\". Since the date picker/date range picker already has a role=\"group\"\n  // with a label and description, and the segments are already labeled by this as well, this\n  // avoids very verbose duplicate announcements.\n  let fieldDOMProps;\n  if (props[$16f0b7bb276bc17e$export$300019f83c56d282] === \"presentation\") fieldDOMProps = {\n    role: \"presentation\"\n  };else fieldDOMProps = (0, $cIPI0$mergeProps)(fieldProps, {\n    role: \"group\",\n    \"aria-disabled\": props.isDisabled || undefined,\n    \"aria-describedby\": describedBy\n  });\n  (0, $cIPI0$useEffect)(() => {\n    if (autoFocusRef.current) focusManager.focusFirst();\n    autoFocusRef.current = false;\n  }, [focusManager]);\n  (0, $cIPI0$useFormReset)(props.inputRef, state.value, state.setValue);\n  (0, $cIPI0$useFormValidation)({\n    ...props,\n    focus() {\n      focusManager.focusFirst();\n    }\n  }, state, props.inputRef);\n  let inputProps = {\n    type: \"hidden\",\n    name: props.name,\n    value: ((_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.toString()) || \"\"\n  };\n  if (props.validationBehavior === \"native\") {\n    // Use a hidden <input type=\"text\"> rather than <input type=\"hidden\">\n    // so that an empty value blocks HTML form submission when the field is required.\n    inputProps.type = \"text\";\n    inputProps.hidden = true;\n    inputProps.required = props.isRequired;\n    // Ignore react warning.\n    inputProps.onChange = () => {};\n  }\n  let domProps = (0, $cIPI0$filterDOMProps)(props);\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    fieldProps: (0, $cIPI0$mergeProps)(domProps, fieldDOMProps, groupProps, focusWithinProps, {\n      onKeyDown(e) {\n        if (props.onKeyDown) props.onKeyDown(e);\n      },\n      onKeyUp(e) {\n        if (props.onKeyUp) props.onKeyUp(e);\n      }\n    }),\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nfunction $16f0b7bb276bc17e$export$4c842f6a241dc825(props, state, ref) {\n  var _state_timeValue;\n  let res = $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref);\n  res.inputProps.value = ((_state_timeValue = state.timeValue) === null || _state_timeValue === void 0 ? void 0 : _state_timeValue.toString()) || \"\";\n  return res;\n}\nfunction $6057a3d2a53a12fd$export$42df105a73306d51(props, state, ref) {\n  let buttonId = (0, $cIPI0$useId)();\n  let dialogId = (0, $cIPI0$useId)();\n  let fieldId = (0, $cIPI0$useId)();\n  let stringFormatter = (0, $cIPI0$useLocalizedStringFormatter)((0, ( /*@__PURE__*/$parcel$interopDefault($dfb4eba373ed9493$exports))), \"@react-aria/datepicker\");\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $cIPI0$useField)({\n    ...props,\n    labelElementType: \"span\",\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);\n  let labelledBy = fieldProps[\"aria-labelledby\"] || fieldProps.id;\n  let {\n    locale: locale\n  } = (0, $cIPI0$useLocale)();\n  let date = state.formatValue(locale, {\n    month: \"long\"\n  });\n  let description = date ? stringFormatter.format(\"selectedDateDescription\", {\n    date: date\n  }) : \"\";\n  let descProps = (0, $cIPI0$useDescription)(description);\n  let ariaDescribedBy = [descProps[\"aria-describedby\"], fieldProps[\"aria-describedby\"]].filter(Boolean).join(\" \") || undefined;\n  let domProps = (0, $cIPI0$filterDOMProps)(props);\n  let focusManager = (0, $cIPI0$useMemo)(() => (0, $cIPI0$createFocusManager)(ref), [ref]);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $cIPI0$useFocusWithin)({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n  return {\n    groupProps: (0, $cIPI0$mergeProps)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: \"group\",\n      \"aria-disabled\": props.isDisabled || null,\n      \"aria-labelledby\": labelledBy,\n      \"aria-describedby\": ariaDescribedBy,\n      onKeyDown(e) {\n        if (state.isOpen) return;\n        if (props.onKeyDown) props.onKeyDown(e);\n      },\n      onKeyUp(e) {\n        if (state.isOpen) return;\n        if (props.onKeyUp) props.onKeyUp(e);\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    fieldProps: {\n      ...fieldProps,\n      id: fieldId,\n      [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: \"presentation\",\n      \"aria-describedby\": ariaDescribedBy,\n      value: state.value,\n      onChange: state.setValue,\n      placeholderValue: props.placeholderValue,\n      hideTimeZone: props.hideTimeZone,\n      hourCycle: props.hourCycle,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n      granularity: props.granularity,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isRequired: props.isRequired,\n      validationBehavior: props.validationBehavior,\n      // DatePicker owns the validation state for the date field.\n      [(0, $cIPI0$privateValidationStateProp)]: state,\n      autoFocus: props.autoFocus,\n      name: props.name\n    },\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-label\": stringFormatter.format(\"calendar\"),\n      \"aria-labelledby\": `${buttonId} ${labelledBy}`,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-expanded\": state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      \"aria-labelledby\": `${buttonId} ${labelledBy}`\n    },\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateValue,\n      onChange: state.setDateValue,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      defaultFocusedValue: state.dateValue ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === \"function\" ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(\" \")\n    },\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // @ts-ignore\n\nfunction $3aeceb3a64eb8358$export$d42c60378c8168f8() {\n  let {\n    locale: locale\n  } = (0, $cIPI0$useLocale)();\n  let dictionary = (0, $cIPI0$useLocalizedStringDictionary)((0, ( /*@__PURE__*/$parcel$interopDefault($dfb4eba373ed9493$exports))), \"@react-aria/datepicker\");\n  return (0, $cIPI0$useMemo)(() => {\n    // Try to use Intl.DisplayNames if possible. It may be supported in browsers, but not support the dateTimeField\n    // type as that was only added in v2. https://github.com/tc39/intl-displaynames-v2\n    try {\n      // @ts-ignore\n      return new Intl.DisplayNames(locale, {\n        type: \"dateTimeField\"\n      });\n    } catch (err) {\n      return new $3aeceb3a64eb8358$var$DisplayNamesPolyfill(locale, dictionary);\n    }\n  }, [locale, dictionary]);\n}\nclass $3aeceb3a64eb8358$var$DisplayNamesPolyfill {\n  of(field) {\n    return this.dictionary.getStringForLocale(field, this.locale);\n  }\n  constructor(locale, dictionary) {\n    this.locale = locale;\n    this.dictionary = dictionary;\n  }\n}\nfunction $32489daedd52963e$export$1315d136e6f7581(segment, state, ref) {\n  let enteredKeys = (0, $cIPI0$useRef)(\"\");\n  let {\n    locale: locale\n  } = (0, $cIPI0$useLocale)();\n  let displayNames = (0, $3aeceb3a64eb8358$export$d42c60378c8168f8)();\n  let {\n    ariaLabel: ariaLabel,\n    ariaLabelledBy: ariaLabelledBy,\n    ariaDescribedBy: ariaDescribedBy,\n    focusManager: focusManager\n  } = (0, $16f0b7bb276bc17e$export$653eddfc964b0f8a).get(state);\n  let textValue = segment.isPlaceholder ? \"\" : segment.text;\n  let options = (0, $cIPI0$useMemo)(() => state.dateFormatter.resolvedOptions(), [state.dateFormatter]);\n  let monthDateFormatter = (0, $cIPI0$useDateFormatter)({\n    month: \"long\",\n    timeZone: options.timeZone\n  });\n  let hourDateFormatter = (0, $cIPI0$useDateFormatter)({\n    hour: \"numeric\",\n    hour12: options.hour12,\n    timeZone: options.timeZone\n  });\n  if (segment.type === \"month\" && !segment.isPlaceholder) {\n    let monthTextValue = monthDateFormatter.format(state.dateValue);\n    textValue = monthTextValue !== textValue ? `${textValue} \\u{2013} ${monthTextValue}` : monthTextValue;\n  } else if (segment.type === \"hour\" && !segment.isPlaceholder) textValue = hourDateFormatter.format(state.dateValue);\n  let {\n    spinButtonProps: spinButtonProps\n  } = (0, $cIPI0$useSpinButton)({\n    // The ARIA spec says aria-valuenow is optional if there's no value, but aXe seems to require it.\n    // This doesn't seem to have any negative effects with real AT since we also use aria-valuetext.\n    // https://github.com/dequelabs/axe-core/issues/3505\n    value: segment.value,\n    textValue: textValue,\n    minValue: segment.minValue,\n    maxValue: segment.maxValue,\n    isDisabled: state.isDisabled,\n    isReadOnly: state.isReadOnly || !segment.isEditable,\n    isRequired: state.isRequired,\n    onIncrement: () => {\n      enteredKeys.current = \"\";\n      state.increment(segment.type);\n    },\n    onDecrement: () => {\n      enteredKeys.current = \"\";\n      state.decrement(segment.type);\n    },\n    onIncrementPage: () => {\n      enteredKeys.current = \"\";\n      state.incrementPage(segment.type);\n    },\n    onDecrementPage: () => {\n      enteredKeys.current = \"\";\n      state.decrementPage(segment.type);\n    },\n    onIncrementToMax: () => {\n      enteredKeys.current = \"\";\n      state.setSegment(segment.type, segment.maxValue);\n    },\n    onDecrementToMin: () => {\n      enteredKeys.current = \"\";\n      state.setSegment(segment.type, segment.minValue);\n    }\n  });\n  let parser = (0, $cIPI0$useMemo)(() => new (0, $cIPI0$NumberParser)(locale, {\n    maximumFractionDigits: 0\n  }), [locale]);\n  let backspace = () => {\n    if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly && !segment.isPlaceholder) {\n      let newValue = segment.text.slice(0, -1);\n      let parsed = parser.parse(newValue);\n      if (newValue.length === 0 || parsed === 0) state.clearSegment(segment.type);else state.setSegment(segment.type, parsed);\n      enteredKeys.current = newValue;\n    } else if (segment.type === \"dayPeriod\") state.clearSegment(segment.type);\n  };\n  let onKeyDown = e => {\n    // Firefox does not fire selectstart for Ctrl/Cmd + A\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1742153\n    if (e.key === \"a\" && ((0, $cIPI0$isMac)() ? e.metaKey : e.ctrlKey)) e.preventDefault();\n    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) return;\n    switch (e.key) {\n      case \"Backspace\":\n      case \"Delete\":\n        // Safari on iOS does not fire beforeinput for the backspace key because the cursor is at the start.\n        e.preventDefault();\n        e.stopPropagation();\n        backspace();\n        break;\n    }\n  };\n  // Safari dayPeriod option doesn't work...\n  let {\n    startsWith: startsWith\n  } = (0, $cIPI0$useFilter)({\n    sensitivity: \"base\"\n  });\n  let amPmFormatter = (0, $cIPI0$useDateFormatter)({\n    hour: \"numeric\",\n    hour12: true\n  });\n  let am = (0, $cIPI0$useMemo)(() => {\n    let date = new Date();\n    date.setHours(0);\n    return amPmFormatter.formatToParts(date).find(part => part.type === \"dayPeriod\").value;\n  }, [amPmFormatter]);\n  let pm = (0, $cIPI0$useMemo)(() => {\n    let date = new Date();\n    date.setHours(12);\n    return amPmFormatter.formatToParts(date).find(part => part.type === \"dayPeriod\").value;\n  }, [amPmFormatter]);\n  // Get a list of formatted era names so users can type the first character to choose one.\n  let eraFormatter = (0, $cIPI0$useDateFormatter)({\n    year: \"numeric\",\n    era: \"narrow\",\n    timeZone: \"UTC\"\n  });\n  let eras = (0, $cIPI0$useMemo)(() => {\n    if (segment.type !== \"era\") return [];\n    let date = (0, $cIPI0$toCalendar)(new (0, $cIPI0$CalendarDate)(1, 1, 1), state.calendar);\n    let eras = state.calendar.getEras().map(era => {\n      let eraDate = date.set({\n        year: 1,\n        month: 1,\n        day: 1,\n        era: era\n      }).toDate(\"UTC\");\n      let parts = eraFormatter.formatToParts(eraDate);\n      let formatted = parts.find(p => p.type === \"era\").value;\n      return {\n        era: era,\n        formatted: formatted\n      };\n    });\n    // Remove the common prefix from formatted values. This is so that in calendars with eras like\n    // ERA0 and ERA1 (e.g. Ethiopic), users can press \"0\" and \"1\" to select an era. In other cases,\n    // the first letter is used.\n    let prefixLength = $32489daedd52963e$var$commonPrefixLength(eras.map(era => era.formatted));\n    if (prefixLength) for (let era of eras) era.formatted = era.formatted.slice(prefixLength);\n    return eras;\n  }, [eraFormatter, state.calendar, segment.type]);\n  let onInput = key => {\n    if (state.isDisabled || state.isReadOnly) return;\n    let newValue = enteredKeys.current + key;\n    switch (segment.type) {\n      case \"dayPeriod\":\n        if (startsWith(am, key)) state.setSegment(\"dayPeriod\", 0);else if (startsWith(pm, key)) state.setSegment(\"dayPeriod\", 12);else break;\n        focusManager.focusNext();\n        break;\n      case \"era\":\n        {\n          let matched = eras.find(e => startsWith(e.formatted, key));\n          if (matched) {\n            state.setSegment(\"era\", matched.era);\n            focusManager.focusNext();\n          }\n          break;\n        }\n      case \"day\":\n      case \"hour\":\n      case \"minute\":\n      case \"second\":\n      case \"month\":\n      case \"year\":\n        {\n          if (!parser.isValidPartialNumber(newValue)) return;\n          let numberValue = parser.parse(newValue);\n          let segmentValue = numberValue;\n          let allowsZero = segment.minValue === 0;\n          if (segment.type === \"hour\" && state.dateFormatter.resolvedOptions().hour12) {\n            switch (state.dateFormatter.resolvedOptions().hourCycle) {\n              case \"h11\":\n                if (numberValue > 11) segmentValue = parser.parse(key);\n                break;\n              case \"h12\":\n                allowsZero = false;\n                if (numberValue > 12) segmentValue = parser.parse(key);\n                break;\n            }\n            if (segment.value >= 12 && numberValue > 1) numberValue += 12;\n          } else if (numberValue > segment.maxValue) segmentValue = parser.parse(key);\n          if (isNaN(numberValue)) return;\n          let shouldSetValue = segmentValue !== 0 || allowsZero;\n          if (shouldSetValue) state.setSegment(segment.type, segmentValue);\n          if (Number(numberValue + \"0\") > segment.maxValue || newValue.length >= String(segment.maxValue).length) {\n            enteredKeys.current = \"\";\n            if (shouldSetValue) focusManager.focusNext();\n          } else enteredKeys.current = newValue;\n          break;\n        }\n    }\n  };\n  let onFocus = () => {\n    enteredKeys.current = \"\";\n    (0, $cIPI0$scrollIntoViewport)(ref.current, {\n      containingElement: (0, $cIPI0$getScrollParent)(ref.current)\n    });\n    // Collapse selection to start or Chrome won't fire input events.\n    let selection = window.getSelection();\n    selection.collapse(ref.current);\n  };\n  let compositionRef = (0, $cIPI0$useRef)(\"\");\n  // @ts-ignore - TODO: possibly old TS version? doesn't fail in my editor...\n  (0, $cIPI0$useEvent)(ref, \"beforeinput\", e => {\n    e.preventDefault();\n    switch (e.inputType) {\n      case \"deleteContentBackward\":\n      case \"deleteContentForward\":\n        if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly) backspace();\n        break;\n      case \"insertCompositionText\":\n        // insertCompositionText cannot be canceled.\n        // Record the current state of the element so we can restore it in the `input` event below.\n        compositionRef.current = ref.current.textContent;\n        // Safari gets stuck in a composition state unless we also assign to the value here.\n        // eslint-disable-next-line no-self-assign\n        ref.current.textContent = ref.current.textContent;\n        break;\n      default:\n        if (e.data != null) onInput(e.data);\n        break;\n    }\n  });\n  (0, $cIPI0$useEvent)(ref, \"input\", e => {\n    let {\n      inputType: inputType,\n      data: data\n    } = e;\n    switch (inputType) {\n      case \"insertCompositionText\":\n        // Reset the DOM to how it was in the beforeinput event.\n        ref.current.textContent = compositionRef.current;\n        // Android sometimes fires key presses of letters as composition events. Need to handle am/pm keys here too.\n        // Can also happen e.g. with Pinyin keyboard on iOS.\n        if (startsWith(am, data) || startsWith(pm, data)) onInput(data);\n        break;\n    }\n  });\n  (0, $cIPI0$useLayoutEffect)(() => {\n    let element = ref.current;\n    return () => {\n      // If the focused segment is removed, focus the previous one, or the next one if there was no previous one.\n      if (document.activeElement === element) {\n        let prev = focusManager.focusPrevious();\n        if (!prev) focusManager.focusNext();\n      }\n    };\n  }, [ref, focusManager]);\n  // spinbuttons cannot be focused with VoiceOver on iOS.\n  let touchPropOverrides = (0, $cIPI0$isIOS)() || segment.type === \"timeZoneName\" ? {\n    role: \"textbox\",\n    \"aria-valuemax\": null,\n    \"aria-valuemin\": null,\n    \"aria-valuetext\": null,\n    \"aria-valuenow\": null\n  } : {};\n  // Only apply aria-describedby to the first segment, unless the field is invalid. This avoids it being\n  // read every time the user navigates to a new segment.\n  let firstSegment = (0, $cIPI0$useMemo)(() => state.segments.find(s => s.isEditable), [state.segments]);\n  if (segment !== firstSegment && !state.isInvalid) ariaDescribedBy = undefined;\n  let id = (0, $cIPI0$useId)();\n  let isEditable = !state.isDisabled && !state.isReadOnly && segment.isEditable;\n  // Prepend the label passed from the field to each segment name.\n  // This is needed because VoiceOver on iOS does not announce groups.\n  let name = segment.type === \"literal\" ? \"\" : displayNames.of(segment.type);\n  let labelProps = (0, $cIPI0$useLabels)({\n    \"aria-label\": `${name}${ariaLabel ? `, ${ariaLabel}` : \"\"}${ariaLabelledBy ? \", \" : \"\"}`,\n    \"aria-labelledby\": ariaLabelledBy\n  });\n  // Literal segments should not be visible to screen readers. We don't really need any of the above,\n  // but the rules of hooks mean hooks cannot be conditional so we have to put this condition here.\n  if (segment.type === \"literal\") return {\n    segmentProps: {\n      \"aria-hidden\": true\n    }\n  };\n  return {\n    segmentProps: (0, $cIPI0$mergeProps)(spinButtonProps, labelProps, {\n      id: id,\n      ...touchPropOverrides,\n      \"aria-invalid\": state.isInvalid ? \"true\" : undefined,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-readonly\": state.isReadOnly || !segment.isEditable ? \"true\" : undefined,\n      \"data-placeholder\": segment.isPlaceholder || undefined,\n      contentEditable: isEditable,\n      suppressContentEditableWarning: isEditable,\n      spellCheck: isEditable ? \"false\" : undefined,\n      autoCapitalize: isEditable ? \"off\" : undefined,\n      autoCorrect: isEditable ? \"off\" : undefined,\n      // Capitalization was changed in React 17...\n      [parseInt((0, $cIPI0$react).version, 10) >= 17 ? \"enterKeyHint\" : \"enterkeyhint\"]: isEditable ? \"next\" : undefined,\n      inputMode: state.isDisabled || segment.type === \"dayPeriod\" || segment.type === \"era\" || !isEditable ? undefined : \"numeric\",\n      tabIndex: state.isDisabled ? undefined : 0,\n      onKeyDown: onKeyDown,\n      onFocus: onFocus,\n      style: {\n        caretColor: \"transparent\"\n      },\n      // Prevent pointer events from reaching useDatePickerGroup, and allow native browser behavior to focus the segment.\n      onPointerDown(e) {\n        e.stopPropagation();\n      },\n      onMouseDown(e) {\n        e.stopPropagation();\n      }\n    })\n  };\n}\nfunction $32489daedd52963e$var$commonPrefixLength(strings) {\n  // Sort the strings, and compare the characters in the first and last to find the common prefix.\n  strings.sort();\n  let first = strings[0];\n  let last = strings[strings.length - 1];\n  for (let i = 0; i < first.length; i++) {\n    if (first[i] !== last[i]) return i;\n  }\n  return 0;\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $887cac91b7cc8801$export$12fd5f0e9f4bb192(props, state, ref) {\n  var _state_value, _state_value1;\n  let stringFormatter = (0, $cIPI0$useLocalizedStringFormatter)((0, ( /*@__PURE__*/$parcel$interopDefault($dfb4eba373ed9493$exports))), \"@react-aria/datepicker\");\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $cIPI0$useField)({\n    ...props,\n    labelElementType: \"span\",\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let labelledBy = fieldProps[\"aria-labelledby\"] || fieldProps.id;\n  let {\n    locale: locale\n  } = (0, $cIPI0$useLocale)();\n  let range = state.formatValue(locale, {\n    month: \"long\"\n  });\n  let description = range ? stringFormatter.format(\"selectedRangeDescription\", {\n    startDate: range.start,\n    endDate: range.end\n  }) : \"\";\n  let descProps = (0, $cIPI0$useDescription)(description);\n  let startFieldProps = {\n    \"aria-label\": stringFormatter.format(\"startDate\"),\n    \"aria-labelledby\": labelledBy\n  };\n  let endFieldProps = {\n    \"aria-label\": stringFormatter.format(\"endDate\"),\n    \"aria-labelledby\": labelledBy\n  };\n  let buttonId = (0, $cIPI0$useId)();\n  let dialogId = (0, $cIPI0$useId)();\n  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);\n  let ariaDescribedBy = [descProps[\"aria-describedby\"], fieldProps[\"aria-describedby\"]].filter(Boolean).join(\" \") || undefined;\n  let focusManager = (0, $cIPI0$useMemo)(() => (0, $cIPI0$createFocusManager)(ref, {\n    // Exclude the button from the focus manager.\n    accept: element => element.id !== buttonId\n  }), [ref, buttonId]);\n  let commonFieldProps = {\n    [(0, $16f0b7bb276bc17e$export$7b3062cd49e80452)]: focusManager,\n    [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: \"presentation\",\n    \"aria-describedby\": ariaDescribedBy,\n    placeholderValue: props.placeholderValue,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    granularity: props.granularity,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    isDisabled: props.isDisabled,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    validationBehavior: props.validationBehavior\n  };\n  let domProps = (0, $cIPI0$filterDOMProps)(props);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $cIPI0$useFocusWithin)({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n  let startFieldValidation = (0, $cIPI0$useRef)((0, $cIPI0$DEFAULT_VALIDATION_RESULT));\n  let endFieldValidation = (0, $cIPI0$useRef)((0, $cIPI0$DEFAULT_VALIDATION_RESULT));\n  return {\n    groupProps: (0, $cIPI0$mergeProps)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: \"group\",\n      \"aria-disabled\": props.isDisabled || null,\n      \"aria-describedby\": ariaDescribedBy,\n      onKeyDown(e) {\n        if (state.isOpen) return;\n        if (props.onKeyDown) props.onKeyDown(e);\n      },\n      onKeyUp(e) {\n        if (state.isOpen) return;\n        if (props.onKeyUp) props.onKeyUp(e);\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-label\": stringFormatter.format(\"calendar\"),\n      \"aria-labelledby\": `${buttonId} ${labelledBy}`,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-expanded\": state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      \"aria-labelledby\": `${buttonId} ${labelledBy}`\n    },\n    startFieldProps: {\n      ...startFieldProps,\n      ...commonFieldProps,\n      value: (_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.start,\n      onChange: start => state.setDateTime(\"start\", start),\n      autoFocus: props.autoFocus,\n      name: props.startName,\n      [(0, $cIPI0$privateValidationStateProp)]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          startFieldValidation.current = e;\n          state.updateValidation((0, $cIPI0$mergeValidation)(e, endFieldValidation.current));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    endFieldProps: {\n      ...endFieldProps,\n      ...commonFieldProps,\n      value: (_state_value1 = state.value) === null || _state_value1 === void 0 ? void 0 : _state_value1.end,\n      onChange: end => state.setDateTime(\"end\", end),\n      name: props.endName,\n      [(0, $cIPI0$privateValidationStateProp)]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          endFieldValidation.current = e;\n          state.updateValidation((0, $cIPI0$mergeValidation)(startFieldValidation.current, e));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateRange,\n      onChange: state.setDateRange,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      allowsNonContiguousRanges: props.allowsNonContiguousRanges,\n      defaultFocusedValue: state.dateRange ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === \"function\" ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(\" \")\n    },\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $6057a3d2a53a12fd$export$42df105a73306d51 as useDatePicker, $32489daedd52963e$export$1315d136e6f7581 as useDateSegment, $16f0b7bb276bc17e$export$5591b0b878c1a989 as useDateField, $16f0b7bb276bc17e$export$4c842f6a241dc825 as useTimeField, $887cac91b7cc8801$export$12fd5f0e9f4bb192 as useDateRangePicker, $3aeceb3a64eb8358$export$d42c60378c8168f8 as useDisplayNames };","map":{"version":3,"names":["$dfb4eba373ed9493$exports","$f23889fffbde9058$exports","$09d9badaa8903929$exports","$151b77e0fd711730$exports","$61915aa8630b90a2$exports","$35cea00159787840$exports","$518b4e82b9eacafd$exports","$1c2b297f7e2cf474$exports","$07f628a707cf9b18$exports","$db553ffe17c7f4db$exports","$4afcfe00cd703f83$exports","$1d2645d18d4c5be0$exports","$64cb6a9be1f6fa48$exports","$2a1ef2e8050be27a$exports","$ad429dca102acd0e$exports","$6e68cb5d1cb97bd2$exports","$a82ee9af063ee069$exports","$67e9091dbf37d4eb$exports","$75834f9729f653d1$exports","$a2df2c2520b4a7f0$exports","$aedcd71db4933ed5$exports","$3b2df9e54353046c$exports","$c03fe977fcfafe93$exports","$569f006fc292345f$exports","$7c2494e14452f2dd$exports","$eb82ef981b5592bf$exports","$6efa0e119f396950$exports","$7f5e57085d7f5049$exports","$578ee7c11dcdde7a$exports","$bbc3fd6cd0bc9d50$exports","$0b04512118591d2a$exports","$3a49d121fe4c9e1d$exports","$5ba21dbb8914919d$exports","$51078838e1b16cd7$exports","$33fab8219207655a$exports","$3dfb0f96be0d6a08$export$4a931266a3838b86","state","ref","disableArrowNavigation","direction","$cIPI0$useLocale","focusManager","$cIPI0$useMemo","$cIPI0$createFocusManager","onKeyDown","e","currentTarget","contains","target","altKey","key","preventDefault","stopPropagation","setOpen","focusNext","focusPrevious","focusLast","_window_event","window","event","walker","$cIPI0$getFocusableTreeWalker","current","tabbable","currentNode","previousNode","last","lastChild","hasAttribute","prev","focus","pressProps","$cIPI0$usePress","preventFocusOnPress","allowTextSelectionOnPress","onPressStart","pointerType","onPress","$cIPI0$mergeProps","$16f0b7bb276bc17e$export$653eddfc964b0f8a","WeakMap","$16f0b7bb276bc17e$export$300019f83c56d282","Date","now","$16f0b7bb276bc17e$export$7b3062cd49e80452","$16f0b7bb276bc17e$export$5591b0b878c1a989","props","_state_value","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","fieldProps","descriptionProps","errorMessageProps","$cIPI0$useField","labelElementType","errorMessage","valueOnFocus","$cIPI0$useRef","focusWithinProps","$cIPI0$useFocusWithin","onFocusWithin","_props_onFocus","value","onFocus","call","onBlurWithin","_props_onBlur","confirmPlaceholder","commitValidation","onBlur","onFocusWithinChange","onFocusChange","stringFormatter","$cIPI0$useLocalizedStringFormatter","$parcel$interopDefault","message","maxGranularity","field","description","format","formatValue","month","descProps","$cIPI0$useDescription","describedBy","filter","Boolean","join","undefined","propsFocusManager","groupProps","set","ariaLabel","ariaLabelledBy","id","ariaDescribedBy","autoFocusRef","autoFocus","fieldDOMProps","role","isDisabled","$cIPI0$useEffect","focusFirst","$cIPI0$useFormReset","inputRef","setValue","$cIPI0$useFormValidation","inputProps","type","name","toString","validationBehavior","hidden","required","isRequired","onChange","domProps","$cIPI0$filterDOMProps","onClick","onKeyUp","$16f0b7bb276bc17e$export$4c842f6a241dc825","_state_timeValue","res","timeValue","$6057a3d2a53a12fd$export$42df105a73306d51","buttonId","$cIPI0$useId","dialogId","fieldId","labelledBy","locale","date","isOpen","placeholderValue","hideTimeZone","hourCycle","shouldForceLeadingZeros","granularity","isReadOnly","$cIPI0$privateValidationStateProp","buttonProps","dialogProps","calendarProps","dateValue","setDateValue","minValue","maxValue","isDateUnavailable","defaultFocusedValue","$3aeceb3a64eb8358$export$d42c60378c8168f8","dictionary","$cIPI0$useLocalizedStringDictionary","Intl","DisplayNames","err","$3aeceb3a64eb8358$var$DisplayNamesPolyfill","of","getStringForLocale","constructor","$32489daedd52963e$export$1315d136e6f7581","segment","enteredKeys","displayNames","get","textValue","isPlaceholder","text","options","dateFormatter","resolvedOptions","monthDateFormatter","$cIPI0$useDateFormatter","timeZone","hourDateFormatter","hour","hour12","monthTextValue","spinButtonProps","$cIPI0$useSpinButton","isEditable","onIncrement","increment","onDecrement","decrement","onIncrementPage","incrementPage","onDecrementPage","decrementPage","onIncrementToMax","setSegment","onDecrementToMin","parser","$cIPI0$NumberParser","maximumFractionDigits","backspace","isValidPartialNumber","newValue","slice","parsed","parse","length","clearSegment","$cIPI0$isMac","metaKey","ctrlKey","shiftKey","startsWith","$cIPI0$useFilter","sensitivity","amPmFormatter","am","setHours","formatToParts","find","part","pm","eraFormatter","year","era","eras","$cIPI0$toCalendar","$cIPI0$CalendarDate","calendar","getEras","map","eraDate","day","toDate","parts","formatted","p","prefixLength","$32489daedd52963e$var$commonPrefixLength","onInput","matched","numberValue","segmentValue","allowsZero","isNaN","shouldSetValue","Number","String","$cIPI0$scrollIntoViewport","containingElement","$cIPI0$getScrollParent","selection","getSelection","collapse","compositionRef","$cIPI0$useEvent","inputType","textContent","data","$cIPI0$useLayoutEffect","element","document","activeElement","touchPropOverrides","$cIPI0$isIOS","firstSegment","segments","s","$cIPI0$useLabels","segmentProps","contentEditable","suppressContentEditableWarning","spellCheck","autoCapitalize","autoCorrect","parseInt","$cIPI0$react","version","inputMode","tabIndex","style","caretColor","onPointerDown","onMouseDown","strings","sort","first","i","$887cac91b7cc8801$export$12fd5f0e9f4bb192","_state_value1","range","startDate","start","endDate","end","startFieldProps","endFieldProps","accept","commonFieldProps","startFieldValidation","$cIPI0$DEFAULT_VALIDATION_RESULT","endFieldValidation","setDateTime","startName","realtimeValidation","updateValidation","$cIPI0$mergeValidation","resetValidation","endName","dateRange","setDateRange","allowsNonContiguousRanges"],"sources":["C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\index.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDatePicker.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\*.js","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDateField.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDatePickerGroup.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDateSegment.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDisplayNames.ts","C:\\Users\\Huzaif Momin\\Desktop\\minor\\webdev\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDateRangePicker.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useDatePicker} from './useDatePicker';\nexport {useDateSegment} from './useDateSegment';\nexport {useDateField, useTimeField} from './useDateField';\nexport {useDateRangePicker} from './useDateRangePicker';\nexport {useDisplayNames} from './useDisplayNames';\n\nexport type {AriaDateFieldProps, AriaDatePickerProps, AriaDateRangePickerProps, DateRange, DateValue, TimeValue} from '@react-types/datepicker';\nexport type {AriaDateFieldOptions, DateFieldAria} from './useDateField';\nexport type {DatePickerAria} from './useDatePicker';\nexport type {DateRangePickerAria} from './useDateRangePicker';\nexport type {DateSegmentAria} from './useDateSegment';\nexport type {AriaTimeFieldProps} from '@react-types/datepicker';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaDatePickerProps, DateValue} from '@react-types/datepicker';\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {CalendarProps} from '@react-types/calendar';\nimport {createFocusManager} from '@react-aria/focus';\nimport {DatePickerState} from '@react-stately/datepicker';\nimport {DOMAttributes, GroupDOMAttributes, KeyboardEvent, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useDescription, useId} from '@react-aria/utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {privateValidationStateProp} from '@react-stately/form';\nimport {RefObject, useMemo} from 'react';\nimport {roleSymbol} from './useDateField';\nimport {useDatePickerGroup} from './useDatePickerGroup';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DatePickerAria extends ValidationResult {\n  /** Props for the date picker's visible label element, if any. */\n  labelProps: DOMAttributes,\n  /** Props for the grouping element containing the date field and button. */\n  groupProps: GroupDOMAttributes,\n  /** Props for the date field. */\n  fieldProps: AriaDatePickerProps<DateValue>,\n  /** Props for the popover trigger button. */\n  buttonProps: AriaButtonProps,\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes,\n  /** Props for the popover dialog. */\n  dialogProps: AriaDialogProps,\n  /** Props for the calendar within the popover dialog. */\n  calendarProps: CalendarProps<DateValue>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a date picker component.\n * A date picker combines a DateField and a Calendar popover to allow users to enter or select a date and time value.\n */\nexport function useDatePicker<T extends DateValue>(props: AriaDatePickerProps<T>, state: DatePickerState, ref: RefObject<Element>): DatePickerAria {\n  let buttonId = useId();\n  let dialogId = useId();\n  let fieldId = useId();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/datepicker');\n\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span',\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n\n  let groupProps = useDatePickerGroup(state, ref);\n\n  let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;\n\n  let {locale} = useLocale();\n  let date = state.formatValue(locale, {month: 'long'});\n  let description = date ? stringFormatter.format('selectedDateDescription', {date}) : '';\n  let descProps = useDescription(description);\n  let ariaDescribedBy = [descProps['aria-describedby'], fieldProps['aria-describedby']].filter(Boolean).join(' ') || undefined;\n  let domProps = filterDOMProps(props);\n  let focusManager = useMemo(() => createFocusManager(ref), [ref]);\n\n  let {focusWithinProps} = useFocusWithin({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  return {\n    groupProps: mergeProps(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: 'group' as const,\n      'aria-disabled': props.isDisabled || null,\n      'aria-labelledby': labelledBy,\n      'aria-describedby': ariaDescribedBy,\n      onKeyDown(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyDown) {\n          props.onKeyDown(e);\n        }\n      },\n      onKeyUp(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyUp) {\n          props.onKeyUp(e);\n        }\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    fieldProps: {\n      ...fieldProps,\n      id: fieldId,\n      [roleSymbol]: 'presentation',\n      'aria-describedby': ariaDescribedBy,\n      value: state.value,\n      onChange: state.setValue,\n      placeholderValue: props.placeholderValue,\n      hideTimeZone: props.hideTimeZone,\n      hourCycle: props.hourCycle,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n      granularity: props.granularity,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isRequired: props.isRequired,\n      validationBehavior: props.validationBehavior,\n      // DatePicker owns the validation state for the date field.\n      [privateValidationStateProp]: state,\n      autoFocus: props.autoFocus,\n      name: props.name\n    },\n    descriptionProps,\n    errorMessageProps,\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      'aria-haspopup': 'dialog',\n      'aria-label': stringFormatter.format('calendar'),\n      'aria-labelledby': `${buttonId} ${labelledBy}`,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      'aria-labelledby': `${buttonId} ${labelledBy}`\n    },\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateValue,\n      onChange: state.setDateValue,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      defaultFocusedValue: state.dateValue ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : (props.errorMessage || state.displayValidation.validationErrors.join(' '))\n    },\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n","const _temp0 = require(\"../intl/ar-AE.json\");\nconst _temp1 = require(\"../intl/bg-BG.json\");\nconst _temp2 = require(\"../intl/cs-CZ.json\");\nconst _temp3 = require(\"../intl/da-DK.json\");\nconst _temp4 = require(\"../intl/de-DE.json\");\nconst _temp5 = require(\"../intl/el-GR.json\");\nconst _temp6 = require(\"../intl/en-US.json\");\nconst _temp7 = require(\"../intl/es-ES.json\");\nconst _temp8 = require(\"../intl/et-EE.json\");\nconst _temp9 = require(\"../intl/fi-FI.json\");\nconst _temp10 = require(\"../intl/fr-FR.json\");\nconst _temp11 = require(\"../intl/he-IL.json\");\nconst _temp12 = require(\"../intl/hr-HR.json\");\nconst _temp13 = require(\"../intl/hu-HU.json\");\nconst _temp14 = require(\"../intl/it-IT.json\");\nconst _temp15 = require(\"../intl/ja-JP.json\");\nconst _temp16 = require(\"../intl/ko-KR.json\");\nconst _temp17 = require(\"../intl/lt-LT.json\");\nconst _temp18 = require(\"../intl/lv-LV.json\");\nconst _temp19 = require(\"../intl/nb-NO.json\");\nconst _temp20 = require(\"../intl/nl-NL.json\");\nconst _temp21 = require(\"../intl/pl-PL.json\");\nconst _temp22 = require(\"../intl/pt-BR.json\");\nconst _temp23 = require(\"../intl/pt-PT.json\");\nconst _temp24 = require(\"../intl/ro-RO.json\");\nconst _temp25 = require(\"../intl/ru-RU.json\");\nconst _temp26 = require(\"../intl/sk-SK.json\");\nconst _temp27 = require(\"../intl/sl-SI.json\");\nconst _temp28 = require(\"../intl/sr-SP.json\");\nconst _temp29 = require(\"../intl/sv-SE.json\");\nconst _temp30 = require(\"../intl/tr-TR.json\");\nconst _temp31 = require(\"../intl/uk-UA.json\");\nconst _temp32 = require(\"../intl/zh-CN.json\");\nconst _temp33 = require(\"../intl/zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDateFieldProps as AriaDateFieldPropsBase, AriaTimeFieldProps, DateValue, TimeValue} from '@react-types/datepicker';\nimport {createFocusManager, FocusManager} from '@react-aria/focus';\nimport {DateFieldState, TimeFieldState} from '@react-stately/datepicker';\nimport {DOMAttributes, GroupDOMAttributes, KeyboardEvent, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useDescription, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject, useEffect, useMemo, useRef} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {useDatePickerGroup} from './useDatePickerGroup';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useFormValidation} from '@react-aria/form';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\n// Allows this hook to also be used with TimeField\nexport interface AriaDateFieldOptions<T extends DateValue> extends Omit<AriaDateFieldPropsBase<T>, 'value' | 'defaultValue' | 'onChange' | 'minValue' | 'maxValue' | 'placeholderValue' | 'validate'> {\n  /** A ref for the hidden input element for HTML form submission. */\n  inputRef?: RefObject<HTMLInputElement>\n}\n\nexport interface DateFieldAria extends ValidationResult {\n   /** Props for the field's visible label element, if any. */\n  labelProps: DOMAttributes,\n   /** Props for the field grouping element. */\n  fieldProps: GroupDOMAttributes,\n  /** Props for the hidden input element for HTML form submission. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n// Data that is passed between useDateField and useDateSegment.\ninterface HookData {\n  ariaLabel: string,\n  ariaLabelledBy: string,\n  ariaDescribedBy: string,\n  focusManager: FocusManager\n}\n\nexport const hookData = new WeakMap<DateFieldState, HookData>();\n\n// Private props that we pass from useDatePicker/useDateRangePicker.\n// Ideally we'd use a Symbol for this, but React doesn't support them: https://github.com/facebook/react/issues/7552\nexport const roleSymbol = '__role_' + Date.now();\nexport const focusManagerSymbol = '__focusManager_' + Date.now();\n\n/**\n * Provides the behavior and accessibility implementation for a date field component.\n * A date field allows users to enter and edit date and time values using a keyboard.\n * Each part of a date value is displayed in an individually editable segment.\n */\nexport function useDateField<T extends DateValue>(props: AriaDateFieldOptions<T>, state: DateFieldState, ref: RefObject<Element>): DateFieldAria {\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span',\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n\n  let valueOnFocus = useRef<DateValue | null>(null);\n  let {focusWithinProps} = useFocusWithin({\n    ...props,\n    onFocusWithin(e) {\n      valueOnFocus.current = state.value;\n      props.onFocus?.(e);\n    },\n    onBlurWithin: (e) => {\n      state.confirmPlaceholder();\n      if (state.value !== valueOnFocus.current) {\n        state.commitValidation();\n      }\n      props.onBlur?.(e);\n    },\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/datepicker');\n  let message = state.maxGranularity === 'hour' ? 'selectedTimeDescription' : 'selectedDateDescription';\n  let field = state.maxGranularity === 'hour' ? 'time' : 'date';\n  let description = state.value ? stringFormatter.format(message, {[field]: state.formatValue({month: 'long'})}) : '';\n  let descProps = useDescription(description);\n\n  // If within a date picker or date range picker, the date field will have role=\"presentation\" and an aria-describedby\n  // will be passed in that references the value (e.g. entire range). Otherwise, add the field's value description.\n  let describedBy = props[roleSymbol] === 'presentation'\n    ? fieldProps['aria-describedby']\n    : [descProps['aria-describedby'], fieldProps['aria-describedby']].filter(Boolean).join(' ') || undefined;\n  let propsFocusManager = props[focusManagerSymbol];\n  let focusManager = useMemo(() => propsFocusManager || createFocusManager(ref), [propsFocusManager, ref]);\n  let groupProps = useDatePickerGroup(state, ref, props[roleSymbol] === 'presentation');\n\n  // Pass labels and other information to segments.\n  hookData.set(state, {\n    ariaLabel: props['aria-label'],\n    ariaLabelledBy: [labelProps.id, props['aria-labelledby']].filter(Boolean).join(' ') || undefined,\n    ariaDescribedBy: describedBy,\n    focusManager\n  });\n\n  let autoFocusRef = useRef(props.autoFocus);\n\n  // When used within a date picker or date range picker, the field gets role=\"presentation\"\n  // rather than role=\"group\". Since the date picker/date range picker already has a role=\"group\"\n  // with a label and description, and the segments are already labeled by this as well, this\n  // avoids very verbose duplicate announcements.\n  let fieldDOMProps: GroupDOMAttributes;\n  if (props[roleSymbol] === 'presentation') {\n    fieldDOMProps = {\n      role: 'presentation'\n    };\n  } else {\n    fieldDOMProps = mergeProps(fieldProps, {\n      role: 'group' as const,\n      'aria-disabled': props.isDisabled || undefined,\n      'aria-describedby': describedBy\n    });\n  }\n\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      focusManager.focusFirst();\n    }\n    autoFocusRef.current = false;\n  }, [focusManager]);\n\n  useFormReset(props.inputRef, state.value, state.setValue);\n  useFormValidation({\n    ...props,\n    focus() {\n      focusManager.focusFirst();\n    }\n  }, state, props.inputRef);\n\n  let inputProps: InputHTMLAttributes<HTMLInputElement> = {\n    type: 'hidden',\n    name: props.name,\n    value: state.value?.toString() || ''\n  };\n\n  if (props.validationBehavior === 'native') {\n    // Use a hidden <input type=\"text\"> rather than <input type=\"hidden\">\n    // so that an empty value blocks HTML form submission when the field is required.\n    inputProps.type = 'text';\n    inputProps.hidden = true;\n    inputProps.required = props.isRequired;\n    // Ignore react warning.\n    inputProps.onChange = () => {};\n  }\n\n  let domProps = filterDOMProps(props);\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    fieldProps: mergeProps(domProps, fieldDOMProps, groupProps, focusWithinProps, {\n      onKeyDown(e: KeyboardEvent) {\n        if (props.onKeyDown) {\n          props.onKeyDown(e);\n        }\n      },\n      onKeyUp(e: KeyboardEvent) {\n        if (props.onKeyUp) {\n          props.onKeyUp(e);\n        }\n      }\n    }),\n    inputProps,\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n\nexport interface AriaTimeFieldOptions<T extends TimeValue> extends AriaTimeFieldProps<T> {\n  /** A ref for the hidden input element for HTML form submission. */\n  inputRef?: RefObject<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a time field component.\n * A time field allows users to enter and edit time values using a keyboard.\n * Each part of a time value is displayed in an individually editable segment.\n */\nexport function useTimeField<T extends TimeValue>(props: AriaTimeFieldOptions<T>, state: TimeFieldState, ref: RefObject<Element>): DateFieldAria {\n  let res = useDateField(props, state, ref);\n  res.inputProps.value = state.timeValue?.toString() || '';\n  return res;\n}\n","import {createFocusManager, getFocusableTreeWalker} from '@react-aria/focus';\nimport {DateFieldState, DatePickerState, DateRangePickerState} from '@react-stately/datepicker';\nimport {FocusableElement, KeyboardEvent} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useMemo} from 'react';\nimport {useLocale} from '@react-aria/i18n';\nimport {usePress} from '@react-aria/interactions';\n\nexport function useDatePickerGroup(state: DatePickerState | DateRangePickerState | DateFieldState, ref: RefObject<Element>, disableArrowNavigation?: boolean) {\n  let {direction} = useLocale();\n  let focusManager = useMemo(() => createFocusManager(ref), [ref]);\n\n  // Open the popover on alt + arrow down\n  let onKeyDown = (e: KeyboardEvent) => {\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n    \n    if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp') && 'setOpen' in state) {\n      e.preventDefault();\n      e.stopPropagation();\n      state.setOpen(true);\n    }\n\n    if (disableArrowNavigation) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === 'rtl') {\n          focusManager.focusNext();\n        } else {\n          focusManager.focusPrevious();\n        }\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        e.stopPropagation();\n        if (direction === 'rtl') {\n          focusManager.focusPrevious();\n        } else {\n          focusManager.focusNext();\n        }\n        break;\n    }\n  };\n\n  // Focus the first placeholder segment from the end on mouse down/touch up in the field.\n  let focusLast = () => {\n    // Try to find the segment prior to the element that was clicked on.\n    let target = window.event?.target as FocusableElement;\n    let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n    if (target) {\n      walker.currentNode = target;\n      target = walker.previousNode() as FocusableElement;\n    }\n\n    // If no target found, find the last element from the end.\n    if (!target) {\n      let last: FocusableElement;\n      do {\n        last = walker.lastChild() as FocusableElement;\n        if (last) {\n          target = last;\n        }\n      } while (last);\n    }\n\n    // Now go backwards until we find an element that is not a placeholder.\n    while (target?.hasAttribute('data-placeholder')) {\n      let prev = walker.previousNode() as FocusableElement;\n      if (prev && prev.hasAttribute('data-placeholder')) {\n        target = prev;\n      } else {\n        break;\n      }\n    }\n\n    if (target) {\n      target.focus();\n    }\n  };\n\n  let {pressProps} = usePress({\n    preventFocusOnPress: true,\n    allowTextSelectionOnPress: true,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse') {\n        focusLast();\n      }\n    },\n    onPress(e) {\n      if (e.pointerType !== 'mouse') {\n        focusLast();\n      }\n    }\n  });\n\n  return mergeProps(pressProps, {onKeyDown});\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, toCalendar} from '@internationalized/date';\nimport {DateFieldState, DateSegment} from '@react-stately/datepicker';\nimport {DOMAttributes} from '@react-types/shared';\nimport {getScrollParent, isIOS, isMac, mergeProps, scrollIntoViewport, useEvent, useId, useLabels, useLayoutEffect} from '@react-aria/utils';\nimport {hookData} from './useDateField';\nimport {NumberParser} from '@internationalized/number';\nimport React, {RefObject, useMemo, useRef} from 'react';\nimport {useDateFormatter, useFilter, useLocale} from '@react-aria/i18n';\nimport {useDisplayNames} from './useDisplayNames';\nimport {useSpinButton} from '@react-aria/spinbutton';\n\nexport interface DateSegmentAria {\n  /** Props for the segment element. */\n  segmentProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a segment in a date field.\n * A date segment displays an individual unit of a date and time, and allows users to edit\n * the value by typing or using the arrow keys to increment and decrement.\n */\nexport function useDateSegment(segment: DateSegment, state: DateFieldState, ref: RefObject<HTMLElement>): DateSegmentAria {\n  let enteredKeys = useRef('');\n  let {locale} = useLocale();\n  let displayNames = useDisplayNames();\n  let {ariaLabel, ariaLabelledBy, ariaDescribedBy, focusManager} = hookData.get(state);\n\n  let textValue = segment.isPlaceholder ? '' : segment.text;\n  let options = useMemo(() => state.dateFormatter.resolvedOptions(), [state.dateFormatter]);\n  let monthDateFormatter = useDateFormatter({month: 'long', timeZone: options.timeZone});\n  let hourDateFormatter = useDateFormatter({\n    hour: 'numeric',\n    hour12: options.hour12,\n    timeZone: options.timeZone\n  });\n\n  if (segment.type === 'month' && !segment.isPlaceholder) {\n    let monthTextValue = monthDateFormatter.format(state.dateValue);\n    textValue = monthTextValue !== textValue ? `${textValue} – ${monthTextValue}` : monthTextValue;\n  } else if (segment.type === 'hour' && !segment.isPlaceholder) {\n    textValue = hourDateFormatter.format(state.dateValue);\n  }\n\n  let {spinButtonProps} = useSpinButton({\n    // The ARIA spec says aria-valuenow is optional if there's no value, but aXe seems to require it.\n    // This doesn't seem to have any negative effects with real AT since we also use aria-valuetext.\n    // https://github.com/dequelabs/axe-core/issues/3505\n    value: segment.value,\n    textValue,\n    minValue: segment.minValue,\n    maxValue: segment.maxValue,\n    isDisabled: state.isDisabled,\n    isReadOnly: state.isReadOnly || !segment.isEditable,\n    isRequired: state.isRequired,\n    onIncrement: () => {\n      enteredKeys.current = '';\n      state.increment(segment.type);\n    },\n    onDecrement: () => {\n      enteredKeys.current = '';\n      state.decrement(segment.type);\n    },\n    onIncrementPage: () => {\n      enteredKeys.current = '';\n      state.incrementPage(segment.type);\n    },\n    onDecrementPage: () => {\n      enteredKeys.current = '';\n      state.decrementPage(segment.type);\n    },\n    onIncrementToMax: () => {\n      enteredKeys.current = '';\n      state.setSegment(segment.type, segment.maxValue);\n    },\n    onDecrementToMin: () => {\n      enteredKeys.current = '';\n      state.setSegment(segment.type, segment.minValue);\n    }\n  });\n\n  let parser = useMemo(() => new NumberParser(locale, {maximumFractionDigits: 0}), [locale]);\n\n  let backspace = () => {\n    if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly && !segment.isPlaceholder) {\n      let newValue = segment.text.slice(0, -1);\n      let parsed = parser.parse(newValue);\n      if (newValue.length === 0 || parsed === 0) {\n        state.clearSegment(segment.type);\n      } else {\n        state.setSegment(segment.type, parsed);\n      }\n      enteredKeys.current = newValue;\n    } else if (segment.type === 'dayPeriod') {\n      state.clearSegment(segment.type);\n    }\n  };\n\n  let onKeyDown = (e) => {\n    // Firefox does not fire selectstart for Ctrl/Cmd + A\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1742153\n    if (e.key === 'a' && (isMac() ? e.metaKey : e.ctrlKey)) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'Backspace':\n      case 'Delete': {\n        // Safari on iOS does not fire beforeinput for the backspace key because the cursor is at the start.\n        e.preventDefault();\n        e.stopPropagation();\n        backspace();\n        break;\n      }\n    }\n  };\n\n  // Safari dayPeriod option doesn't work...\n  let {startsWith} = useFilter({sensitivity: 'base'});\n  let amPmFormatter = useDateFormatter({hour: 'numeric', hour12: true});\n  let am = useMemo(() => {\n    let date = new Date();\n    date.setHours(0);\n    return amPmFormatter.formatToParts(date).find(part => part.type === 'dayPeriod').value;\n  }, [amPmFormatter]);\n\n  let pm = useMemo(() => {\n    let date = new Date();\n    date.setHours(12);\n    return amPmFormatter.formatToParts(date).find(part => part.type === 'dayPeriod').value;\n  }, [amPmFormatter]);\n\n  // Get a list of formatted era names so users can type the first character to choose one.\n  let eraFormatter = useDateFormatter({year: 'numeric', era: 'narrow', timeZone: 'UTC'});\n  let eras = useMemo(() => {\n    if (segment.type !== 'era') {\n      return [];\n    }\n\n    let date = toCalendar(new CalendarDate(1, 1, 1), state.calendar);\n    let eras = state.calendar.getEras().map(era => {\n      let eraDate = date.set({year: 1, month: 1, day: 1, era}).toDate('UTC');\n      let parts = eraFormatter.formatToParts(eraDate);\n      let formatted = parts.find(p => p.type === 'era').value;\n      return {era, formatted};\n    });\n\n    // Remove the common prefix from formatted values. This is so that in calendars with eras like\n    // ERA0 and ERA1 (e.g. Ethiopic), users can press \"0\" and \"1\" to select an era. In other cases,\n    // the first letter is used.\n    let prefixLength = commonPrefixLength(eras.map(era => era.formatted));\n    if (prefixLength) {\n      for (let era of eras) {\n        era.formatted = era.formatted.slice(prefixLength);\n      }\n    }\n\n    return eras;\n  }, [eraFormatter, state.calendar, segment.type]);\n\n  let onInput = (key: string) => {\n    if (state.isDisabled || state.isReadOnly) {\n      return;\n    }\n\n    let newValue = enteredKeys.current + key;\n\n    switch (segment.type) {\n      case 'dayPeriod':\n        if (startsWith(am, key)) {\n          state.setSegment('dayPeriod', 0);\n        } else if (startsWith(pm, key)) {\n          state.setSegment('dayPeriod', 12);\n        } else {\n          break;\n        }\n        focusManager.focusNext();\n        break;\n      case 'era': {\n        let matched = eras.find(e => startsWith(e.formatted, key));\n        if (matched) {\n          state.setSegment('era', matched.era);\n          focusManager.focusNext();\n        }\n        break;\n      }\n      case 'day':\n      case 'hour':\n      case 'minute':\n      case 'second':\n      case 'month':\n      case 'year': {\n        if (!parser.isValidPartialNumber(newValue)) {\n          return;\n        }\n\n        let numberValue = parser.parse(newValue);\n        let segmentValue = numberValue;\n        let allowsZero = segment.minValue === 0;\n        if (segment.type === 'hour' && state.dateFormatter.resolvedOptions().hour12) {\n          switch (state.dateFormatter.resolvedOptions().hourCycle) {\n            case 'h11':\n              if (numberValue > 11) {\n                segmentValue = parser.parse(key);\n              }\n              break;\n            case 'h12':\n              allowsZero = false;\n              if (numberValue > 12) {\n                segmentValue = parser.parse(key);\n              }\n              break;\n          }\n\n          if (segment.value >= 12 && numberValue > 1) {\n            numberValue += 12;\n          }\n        } else if (numberValue > segment.maxValue) {\n          segmentValue = parser.parse(key);\n        }\n\n        if (isNaN(numberValue)) {\n          return;\n        }\n\n        let shouldSetValue = segmentValue !== 0 || allowsZero;\n        if (shouldSetValue) {\n          state.setSegment(segment.type, segmentValue);\n        }\n\n        if (Number(numberValue + '0') > segment.maxValue || newValue.length >= String(segment.maxValue).length) {\n          enteredKeys.current = '';\n          if (shouldSetValue) {\n            focusManager.focusNext();\n          }\n        } else {\n          enteredKeys.current = newValue;\n        }\n        break;\n      }\n    }\n  };\n\n  let onFocus = () => {\n    enteredKeys.current = '';\n    scrollIntoViewport(ref.current, {containingElement: getScrollParent(ref.current)});\n\n    // Collapse selection to start or Chrome won't fire input events.\n    let selection = window.getSelection();\n    selection.collapse(ref.current);\n  };\n\n  let compositionRef = useRef('');\n  // @ts-ignore - TODO: possibly old TS version? doesn't fail in my editor...\n  useEvent(ref, 'beforeinput', e => {\n    e.preventDefault();\n\n    switch (e.inputType) {\n      case 'deleteContentBackward':\n      case 'deleteContentForward':\n        if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly) {\n          backspace();\n        }\n        break;\n      case 'insertCompositionText':\n        // insertCompositionText cannot be canceled.\n        // Record the current state of the element so we can restore it in the `input` event below.\n        compositionRef.current = ref.current.textContent;\n\n        // Safari gets stuck in a composition state unless we also assign to the value here.\n        // eslint-disable-next-line no-self-assign\n        ref.current.textContent = ref.current.textContent;\n        break;\n      default:\n        if (e.data != null) {\n          onInput(e.data);\n        }\n        break;\n    }\n  });\n\n  useEvent(ref, 'input', (e: InputEvent) => {\n    let {inputType, data} = e;\n    switch (inputType) {\n      case 'insertCompositionText':\n        // Reset the DOM to how it was in the beforeinput event.\n        ref.current.textContent = compositionRef.current;\n\n        // Android sometimes fires key presses of letters as composition events. Need to handle am/pm keys here too.\n        // Can also happen e.g. with Pinyin keyboard on iOS.\n        if (startsWith(am, data) || startsWith(pm, data)) {\n          onInput(data);\n        }\n        break;\n    }\n  });\n\n  useLayoutEffect(() => {\n    let element = ref.current;\n    return () => {\n      // If the focused segment is removed, focus the previous one, or the next one if there was no previous one.\n      if (document.activeElement === element) {\n        let prev = focusManager.focusPrevious();\n        if (!prev) {\n          focusManager.focusNext();\n        }\n      }\n    };\n  }, [ref, focusManager]);\n\n  // spinbuttons cannot be focused with VoiceOver on iOS.\n  let touchPropOverrides = isIOS() || segment.type === 'timeZoneName' ? {\n    role: 'textbox',\n    'aria-valuemax': null,\n    'aria-valuemin': null,\n    'aria-valuetext': null,\n    'aria-valuenow': null\n  } : {};\n\n  // Only apply aria-describedby to the first segment, unless the field is invalid. This avoids it being\n  // read every time the user navigates to a new segment.\n  let firstSegment = useMemo(() => state.segments.find(s => s.isEditable), [state.segments]);\n  if (segment !== firstSegment && !state.isInvalid) {\n    ariaDescribedBy = undefined;\n  }\n\n  let id = useId();\n  let isEditable = !state.isDisabled && !state.isReadOnly && segment.isEditable;\n\n  // Prepend the label passed from the field to each segment name.\n  // This is needed because VoiceOver on iOS does not announce groups.\n  let name = segment.type === 'literal' ? '' : displayNames.of(segment.type);\n  let labelProps = useLabels({\n    'aria-label': `${name}${ariaLabel ? `, ${ariaLabel}` : ''}${ariaLabelledBy ? ', ' : ''}`,\n    'aria-labelledby': ariaLabelledBy\n  });\n\n  // Literal segments should not be visible to screen readers. We don't really need any of the above,\n  // but the rules of hooks mean hooks cannot be conditional so we have to put this condition here.\n  if (segment.type === 'literal') {\n    return {\n      segmentProps: {\n        'aria-hidden': true\n      }\n    };\n  }\n\n  return {\n    segmentProps: mergeProps(spinButtonProps, labelProps, {\n      id,\n      ...touchPropOverrides,\n      'aria-invalid': state.isInvalid ? 'true' : undefined,\n      'aria-describedby': ariaDescribedBy,\n      'aria-readonly': state.isReadOnly || !segment.isEditable ? 'true' : undefined,\n      'data-placeholder': segment.isPlaceholder || undefined,\n      contentEditable: isEditable,\n      suppressContentEditableWarning: isEditable,\n      spellCheck: isEditable ? 'false' : undefined,\n      autoCapitalize: isEditable ? 'off' : undefined,\n      autoCorrect: isEditable ? 'off' : undefined,\n      // Capitalization was changed in React 17...\n      [parseInt(React.version, 10) >= 17 ? 'enterKeyHint' : 'enterkeyhint']: isEditable ? 'next' : undefined,\n      inputMode: state.isDisabled || segment.type === 'dayPeriod' || segment.type === 'era' || !isEditable ? undefined : 'numeric',\n      tabIndex: state.isDisabled ? undefined : 0,\n      onKeyDown,\n      onFocus,\n      style: {\n        caretColor: 'transparent'\n      },\n      // Prevent pointer events from reaching useDatePickerGroup, and allow native browser behavior to focus the segment.\n      onPointerDown(e) {\n        e.stopPropagation();\n      },\n      onMouseDown(e) {\n        e.stopPropagation();\n      }\n    })\n  };\n}\n\nfunction commonPrefixLength(strings: string[]): number {\n  // Sort the strings, and compare the characters in the first and last to find the common prefix.\n  strings.sort();\n  let first = strings[0];\n  let last = strings[strings.length - 1];\n  for (let i = 0; i < first.length; i++) {\n    if (first[i] !== last[i]) {\n      return i;\n    }\n  }\n  return 0;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {LocalizedStringDictionary} from '@internationalized/string';\nimport {useLocale, useLocalizedStringDictionary} from '@react-aria/i18n';\nimport {useMemo} from 'react';\n\ntype Field = Intl.DateTimeFormatPartTypes;\ninterface DisplayNames {\n  of(field: Field): string\n}\n\n/** @private */\nexport function useDisplayNames(): DisplayNames {\n  let {locale} = useLocale();\n  let dictionary = useLocalizedStringDictionary(intlMessages, '@react-aria/datepicker');\n  return useMemo(() => {\n    // Try to use Intl.DisplayNames if possible. It may be supported in browsers, but not support the dateTimeField\n    // type as that was only added in v2. https://github.com/tc39/intl-displaynames-v2\n    try {\n      // @ts-ignore\n      return new Intl.DisplayNames(locale, {type: 'dateTimeField'});\n    } catch (err) {\n      return new DisplayNamesPolyfill(locale, dictionary);\n    }\n  }, [locale, dictionary]);\n}\n\nclass DisplayNamesPolyfill implements DisplayNames {\n  private locale: string;\n  private dictionary: LocalizedStringDictionary<Field, string>;\n\n  constructor(locale: string, dictionary: LocalizedStringDictionary<Field, string>) {\n    this.locale = locale;\n    this.dictionary = dictionary;\n  }\n\n  of(field: Field): string {\n    return this.dictionary.getStringForLocale(field, this.locale);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaDatePickerProps, AriaDateRangePickerProps, DateValue} from '@react-types/datepicker';\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {createFocusManager} from '@react-aria/focus';\nimport {DateRangePickerState} from '@react-stately/datepicker';\nimport {DEFAULT_VALIDATION_RESULT, mergeValidation, privateValidationStateProp} from '@react-stately/form';\nimport {DOMAttributes, GroupDOMAttributes, KeyboardEvent, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useDescription, useId} from '@react-aria/utils';\nimport {focusManagerSymbol, roleSymbol} from './useDateField';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {RangeCalendarProps} from '@react-types/calendar';\nimport {RefObject, useMemo, useRef} from 'react';\nimport {useDatePickerGroup} from './useDatePickerGroup';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DateRangePickerAria extends ValidationResult {\n  /** Props for the date range picker's visible label element, if any. */\n  labelProps: DOMAttributes,\n  /** Props for the grouping element containing the date fields and button. */\n  groupProps: GroupDOMAttributes,\n  /** Props for the start date field. */\n  startFieldProps: AriaDatePickerProps<DateValue>,\n  /** Props for the end date field. */\n  endFieldProps: AriaDatePickerProps<DateValue>,\n  /** Props for the popover trigger button. */\n  buttonProps: AriaButtonProps,\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes,\n  /** Props for the popover dialog. */\n  dialogProps: AriaDialogProps,\n  /** Props for the range calendar within the popover dialog. */\n  calendarProps: RangeCalendarProps<DateValue>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a date picker component.\n * A date range picker combines two DateFields and a RangeCalendar popover to allow\n * users to enter or select a date and time range.\n */\nexport function useDateRangePicker<T extends DateValue>(props: AriaDateRangePickerProps<T>, state: DateRangePickerState, ref: RefObject<Element>): DateRangePickerAria {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/datepicker');\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span',\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n\n  let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;\n\n  let {locale} = useLocale();\n  let range = state.formatValue(locale, {month: 'long'});\n  let description = range ? stringFormatter.format('selectedRangeDescription', {startDate: range.start, endDate: range.end}) : '';\n  let descProps = useDescription(description);\n\n  let startFieldProps = {\n    'aria-label': stringFormatter.format('startDate'),\n    'aria-labelledby': labelledBy\n  };\n\n  let endFieldProps = {\n    'aria-label': stringFormatter.format('endDate'),\n    'aria-labelledby': labelledBy\n  };\n\n  let buttonId = useId();\n  let dialogId = useId();\n\n  let groupProps = useDatePickerGroup(state, ref);\n\n  let ariaDescribedBy = [descProps['aria-describedby'], fieldProps['aria-describedby']].filter(Boolean).join(' ') || undefined;\n  let focusManager = useMemo(() => createFocusManager(ref, {\n    // Exclude the button from the focus manager.\n    accept: element => element.id !== buttonId\n  }), [ref, buttonId]);\n\n  let commonFieldProps = {\n    [focusManagerSymbol]: focusManager,\n    [roleSymbol]: 'presentation',\n    'aria-describedby': ariaDescribedBy,\n    placeholderValue: props.placeholderValue,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    granularity: props.granularity,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    isDisabled: props.isDisabled,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    validationBehavior: props.validationBehavior\n  };\n\n  let domProps = filterDOMProps(props);\n\n  let {focusWithinProps} = useFocusWithin({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  let startFieldValidation = useRef(DEFAULT_VALIDATION_RESULT);\n  let endFieldValidation = useRef(DEFAULT_VALIDATION_RESULT);\n\n  return {\n    groupProps: mergeProps(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: 'group' as const,\n      'aria-disabled': props.isDisabled || null,\n      'aria-describedby': ariaDescribedBy,\n      onKeyDown(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyDown) {\n          props.onKeyDown(e);\n        }\n      },\n      onKeyUp(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyUp) {\n          props.onKeyUp(e);\n        }\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      'aria-haspopup': 'dialog',\n      'aria-label': stringFormatter.format('calendar'),\n      'aria-labelledby': `${buttonId} ${labelledBy}`,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      'aria-labelledby': `${buttonId} ${labelledBy}`\n    },\n    startFieldProps: {\n      ...startFieldProps,\n      ...commonFieldProps,\n      value: state.value?.start,\n      onChange: start => state.setDateTime('start', start),\n      autoFocus: props.autoFocus,\n      name: props.startName,\n      [privateValidationStateProp]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          startFieldValidation.current = e;\n          state.updateValidation(mergeValidation(e, endFieldValidation.current));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    endFieldProps: {\n      ...endFieldProps,\n      ...commonFieldProps,\n      value: state.value?.end,\n      onChange: end => state.setDateTime('end', end),\n      name: props.endName,\n      [privateValidationStateProp]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          endFieldValidation.current = e;\n          state.updateValidation(mergeValidation(startFieldValidation.current, e));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    descriptionProps,\n    errorMessageProps,\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateRange,\n      onChange: state.setDateRange,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      allowsNonContiguousRanges: props.allowsNonContiguousRanges,\n      defaultFocusedValue: state.dateRange ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : (props.errorMessage || state.displayValidation.validationErrors.join(' '))\n    },\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}